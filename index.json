[{"content":"Google Breakpad是一套完整的工具集，从crash的捕获到crash的dump，都提供了相对应的工具。\n1. 编译与安装 项目中要用到breakpad编译后的两个可执行文件src/processor/minidump_stackwalk和src/tools/linux/dump_syms/dump_syms，前者其实Android Studio已经提供了Windows版的，在Android Studio/bin/lldb/bin下，但是dump_syms只能从源码编译得到，而且最好是在Linux环境下编译及使用，所以可以使用WSL进行，WSL在Windows Store上下载即可使用，可选Ubuntu-20.04、Ubuntu-18.04等等。\n1.1 depot_tools安装 depot_tools是用于管理Google开源项目，不仅仅有breakpad，还可以获取Chromium、WebRTC等源码，这里使用depot_tools拉取breakpad的源码，如果是从Github上clone的breakpad源码可能会缺失linux_syscall_support.h头文件\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git 添加环境变量并source ~/.bashrc，如果用的是zsh，同理修改.zshrc\nexport PATH=/path/to/depot_tools:$PATH 1.2 breakpad编译与安装 首先需要安装python 2，否则fetch breakpad会失败；并且安装基础编译工具\nsudo apt-get update sudo apt install python 按照Github指示一步一步执行即可：\nmkdir breakpad \u0026amp;\u0026amp; cd breakpad  fetch breakpad cd src  ./configure \u0026amp;\u0026amp; make  sudo make install 其中fetch breakpad可能需要10分钟以上，成功的结果\ntao@LTSZ-TaoZhou:~/breakpad$ fetch breakpad Running: gclient root Running: gclient config --spec \u0026#39;solutions = [ { \u0026#34;name\u0026#34;: \u0026#34;src\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://chromium.googlesource.com/breakpad/breakpad.git\u0026#34;, \u0026#34;managed\u0026#34;: False, \u0026#34;custom_deps\u0026#34;: {}, }, ] \u0026#39; Running: gclient sync  ________ running \u0026#39;git -c core.deltaBaseCacheLimit=2g clone --no-checkout --progress https://chromium.googlesource.com/breakpad/breakpad.git /home/tao/breakpad/_gclient_src_a_m392sy\u0026#39; in \u0026#39;/home/tao/breakpad\u0026#39; Cloning into \u0026#39;/home/tao/breakpad/_gclient_src_a_m392sy\u0026#39;... remote: Sending approximately 40.06 MiB ... remote: Total 19092 (delta 14865), reused 19092 (delta 14865) Receiving objects: 100% (19092/19092), 40.06 MiB | 4.63 MiB/s, done. Resolving deltas: 100% (14865/14865), done. Syncing projects: 80% ( 4/ 5) src/src/testing [0:01:44] Still working on: [0:01:44] src/src/third_party/protobuf/protobuf  [0:01:54] Still working on: [0:01:54] src/src/third_party/protobuf/protobuf  [0:02:04] Still working on: [0:02:04] src/src/third_party/protobuf/protobuf  [0:02:14] Still working on: [0:02:14] src/src/third_party/protobuf/protobuf  [0:02:24] Still working on: [0:02:24] src/src/third_party/protobuf/protobuf  [0:02:34] Still working on: [0:02:34] src/src/third_party/protobuf/protobuf  [0:02:44] Still working on: [0:02:44] src/src/third_party/protobuf/protobuf  [0:02:54] Still working on: [0:02:54] src/src/third_party/protobuf/protobuf  [0:02:55] Still working on: [0:02:55] src/src/third_party/protobuf/protobuf Syncing projects: 100% (5/5), done. Running hooks: 100% (3/3), done. Running: git submodule foreach \u0026#39;git config -f $toplevel/.git/config submodule.$name.ignore all\u0026#39; Running: git config --add remote.origin.fetch \u0026#39;+refs/tags/*:refs/tags/*\u0026#39; Running: git config diff.ignoreSubmodules all ./configure \u0026amp;\u0026amp; make结果，没有显示error即可，最后sudo make install，install需要root权限\ng++ -I./src/third_party/mac_headers -DHAVE_MACH_O_NLIST_H -g -O2 -o src/tools/mac/dump_syms/dump_syms_mac src/common/src_tools_mac_dump_syms_dump_syms_mac-dwarf_cfi_to_module.o src/common/src_tools_mac_dump_syms_dump_syms_mac-dwarf_cu_to_module.o src/common/src_tools_mac_dump_syms_dump_syms_mac-dwarf_line_to_module.o src/common/src_tools_mac_dump_syms_dump_syms_mac-dwarf_range_list_handler.o src/common/src_tools_mac_dump_syms_dump_syms_mac-language.o src/common/src_tools_mac_dump_syms_dump_syms_mac-md5.o src/common/src_tools_mac_dump_syms_dump_syms_mac-module.o src/common/src_tools_mac_dump_syms_dump_syms_mac-path_helper.o src/common/src_tools_mac_dump_syms_dump_syms_mac-stabs_reader.o src/common/src_tools_mac_dump_syms_dump_syms_mac-stabs_to_module.o src/common/dwarf/src_tools_mac_dump_syms_dump_syms_mac-bytereader.o src/common/dwarf/src_tools_mac_dump_syms_dump_syms_mac-dwarf2diehandler.o src/common/dwarf/src_tools_mac_dump_syms_dump_syms_mac-dwarf2reader.o src/common/dwarf/src_tools_mac_dump_syms_dump_syms_mac-elf_reader.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-arch_utilities.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-dump_syms.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-file_id.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-macho_id.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-macho_reader.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-macho_utilities.o src/common/mac/src_tools_mac_dump_syms_dump_syms_mac-macho_walker.o src/tools/mac/dump_syms/src_tools_mac_dump_syms_dump_syms_mac-dump_syms_tool.o 最后测试一下\ntao@LTSZ-TaoZhou:~$ dump_syms -V 2.4 -V Usage: dump_syms [OPTION] \u0026lt;binary-with-debugging-info\u0026gt; [directories-for-debug-file]  Options:  -i: Output module header information only.  -c Do not generate CFI section  -r Do not handle inter-compilation unit references  -v Print all warnings to stderr  -n \u0026lt;name\u0026gt; Use specified name for name of the object  -o \u0026lt;os\u0026gt; Use specified name for the operating system tao@LTSZ-TaoZhou:~$ minidump_stackwalk -V minidump_stackwalk: invalid option -- \u0026#39;V\u0026#39; Usage: minidump_stackwalk [options] \u0026lt;minidump-file\u0026gt; [symbol-path ...]  Output a stack trace for the provided minidump  Options:   -m Output in machine-readable format  -s Output stack contents 参考：  Breakpad Github depot_tools_tutorial  ","permalink":"https://zhoutao822.github.io/posts/breakpad/","summary":"Breakpad是一个库和工具套件可以让你发布的应用程序（把编译器提供的调试信息剥离掉的）给用户，记录了崩溃紧凑的“dump”文件，发送回您的服务器，并从这些minidump产生C和C++堆栈踪迹。","title":"Breakpad"},{"content":"Windows环境 1. 安装LaTeX发行版 在Windows下我选择的是MikTeX，Mac下选择的是MacTex，这个LaTeX发行版相当于一个开发工具包，你需要的编译器以及某些资源文件都包含在这个包里面，安装完成后可以通过命令行启用。\n在Windows下MikTeX的安装教程链接为Install MiKTeX on Windows，链接里也给出了安装包的地址Basic MiKTeX Installer，安装完成后打开 MiKTeX Console 更新package。目前这个阶段还不需要安装额外的package，这个我们可以等到编译论文的时候再下载。\n2. VSCode安装与参数设置 VSCode的安装没什么可说的，完成后需要在扩展中搜索latex，就可以找到需要的插件LaTeX Workshop，安装完成后需要配置一些参数，在设置中搜索latex，打开settings.json，加入以下参数\n\u0026#34;latex-workshop.view.pdf.viewer\u0026#34;: \u0026#34;tab\u0026#34;, \u0026#34;latex-workshop.latex.recipes\u0026#34;: [  {  \u0026#34;name\u0026#34;: \u0026#34;latexmk\u0026#34;,  \u0026#34;tools\u0026#34;: [  \u0026#34;latexmk\u0026#34;  ]  },  {  \u0026#34;name\u0026#34;: \u0026#34;pdflatex\u0026#34;,  \u0026#34;tools\u0026#34;: [  \u0026#34;pdflatex\u0026#34;  ]  },  {  \u0026#34;name\u0026#34;: \u0026#34;pdflatex -\u0026gt; bibtex -\u0026gt; pdflatex*2\u0026#34;,  \u0026#34;tools\u0026#34;: [  \u0026#34;pdflatex\u0026#34;,  \u0026#34;bibtex\u0026#34;,  \u0026#34;pdflatex\u0026#34;,  \u0026#34;pdflatex\u0026#34;  ]  } ], \u0026#34;latex-workshop.latex.tools\u0026#34;: [  {  \u0026#34;name\u0026#34;: \u0026#34;xelatex\u0026#34;,  \u0026#34;command\u0026#34;: \u0026#34;xelatex\u0026#34;,  \u0026#34;args\u0026#34;: [  \u0026#34;-synctex=1\u0026#34;,  \u0026#34;-interaction=nonstopmode\u0026#34;,  \u0026#34;-file-line-error\u0026#34;,  \u0026#34;%DOC%\u0026#34;  ]  },  {  \u0026#34;name\u0026#34;: \u0026#34;pdflatex\u0026#34;,  \u0026#34;command\u0026#34;: \u0026#34;pdflatex\u0026#34;,  \u0026#34;args\u0026#34;: [  \u0026#34;-synctex=1\u0026#34;,  \u0026#34;-interaction=nonstopmode\u0026#34;,  \u0026#34;-file-line-error\u0026#34;,  \u0026#34;%DOC%\u0026#34;  ]  },  {  \u0026#34;name\u0026#34;: \u0026#34;latexmk\u0026#34;,  \u0026#34;command\u0026#34;: \u0026#34;latexmk\u0026#34;,  \u0026#34;args\u0026#34;: [  \u0026#34;-xelatex\u0026#34;  ]  },  {  \u0026#34;name\u0026#34;: \u0026#34;bibtex\u0026#34;,  \u0026#34;command\u0026#34;: \u0026#34;bibtex\u0026#34;,  \u0026#34;args\u0026#34;: [  \u0026#34;%DOCFILE%\u0026#34;  ]  } ], \u0026#34;latex-workshop.latex.autoBuild.run\u0026#34;: \u0026#34;never\u0026#34;, \u0026#34;latex-workshop.latex.autoClean.run\u0026#34;: \u0026#34;never\u0026#34;, \u0026#34;latex-workshop.latex.clean.fileTypes\u0026#34;: [  \u0026#34;*.aux\u0026#34;,  \u0026#34;*.bbl\u0026#34;,  \u0026#34;*.blg\u0026#34;,  \u0026#34;*.idx\u0026#34;,  \u0026#34;*.ind\u0026#34;,  \u0026#34;*.lof\u0026#34;,  \u0026#34;*.lot\u0026#34;,  \u0026#34;*.out\u0026#34;,  \u0026#34;*.toc\u0026#34;,  \u0026#34;*.acn\u0026#34;,  \u0026#34;*.acr\u0026#34;,  \u0026#34;*.alg\u0026#34;,  \u0026#34;*.glg\u0026#34;,  \u0026#34;*.glo\u0026#34;,  \u0026#34;*.gls\u0026#34;,  \u0026#34;*.ist\u0026#34;,  \u0026#34;*.fls\u0026#34;,  \u0026#34;*.log\u0026#34;,  \u0026#34;*.xdv\u0026#34;,  \u0026#34;*.fdb_latexmk\u0026#34;,  \u0026#34;*.synctex.gz\u0026#34;  ] 参数说明：\n latex-workshop.view.pdf.viewer设置为tab可以在VSCode里查看生成的pdf文件，你也可以选择其他方式； latex-workshop.latex.tools定义你可能需要用到的编译工具，比如latexmk、xelatex、pdflatex等等，这里定义的工具才可以在latex-workshop.latex.recipes里使用，这里latexmk的参数被修改为-xelatex，与Github上相同，我这里加入了很多的工具，并不一定全都要用； latex-workshop.latex.recipes定义编译方式，比如latexmk、pdflatex -\u0026gt; bibtex -\u0026gt; pdflatex*2，这里同上，也并不一定全都要用，不同的编译方式会导致最终生成的pdf文件内容存在差异，使用latexmk以外的编译工具编译中国科学技术大学学位论文 LaTeX 模板可能会导致pdf中丢失目录以及文献列表等内容，在这里定义的编译方式会在后面显示在VSCode的选项中； latex-workshop.latex.autoBuild.run设置为never是为了避免每次修改完tex文件后自动编译，也可以不设置此参数； latex-workshop.latex.autoClean.run设置为never是为了避免自动清理编译过程产生的临时文件，这里会有一些log文件，也可以不设置此参数。 latex-workshop.latex.clean.fileTypes设置需要清理临时文件类型，以各种后缀表示，有些文件可能不需要清理，这个需要自行判断。  3. 编译论文模板 在中国科学技术大学学位论文 LaTeX 模板下载release文件ustcthesis-v3.1.06.zip，这里面有模板以及样例文件。\n文件目录大概如下图，里面某些pdf和tex文件可能不同，但不重要\n用VSCode打开模板文件，并打开main.tex文件，这里可以先把main.pdf重命名一下，此时如果之前的步骤都是对的，那么VSCode的左下角会有一个勾的图标，点击后应该如下图\n这里会发现之前设置参数时加入的recipe都显示出来，中国科学技术大学学位论文 LaTeX 模板 需要用latexmk编译，所以直接双击Recipe: latexmk编译main.tex，生成main.pdf文件，在编译过程中会提示你缺少某些package，这些package里面有需要的一些样式文件，类似于CSS，弹出的窗口来自于MikTeX Console，点击确定下载即可，可能会需要点很多次，当所有需要的package下载完成后编译也可以继续下去，最后比对一下生成的main.pdf文件内容与重命名之前的main.pdf，看看有没有缺失或者显示不对的地方，如果有，再查找原因，一般来说问题出在缺少某些package。如果需要清理生成的临时文件只需要双击Clean up即可。\n这是我生成的pdf文件截图，第一张图我修改为硕士，第二张图生成当前时间。\nMac环境 1. 安装LaTeX发行版 在Mac下选择的安装MacTeX，而MacTeX有几个不同的安装包，一个是MacTeX.pkg，大概3.9G，还有一个是BasicTeX.pkg，大概76M，区别在于前者包括了GUI，大概有4个工具配合使用，后者没有GUI仅提供命令行工具，这里我选择了后者，前者应该也没有区别。\n命令行工具为tlmgr，我在运行时需要加sudo，应该是安装路径对一般用户不可写。\n然后需要使用tlmgr安装一些package，我们先设置一下镜像源加速下载\n# 这是清华镜像源，也可以使用科大镜像源http://mirrors.ustc.edu.cn/CTAN/systems/texlive/tlnet tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet 然后更新自己和所有的package\nsudo tlmgr update --self --all 最后需要下载latexmk包，Windows不需要应该是MikTeX中已经包含了这个包，而Mac下BasicTeX没有包含，所以需要自己下载。\nsudo tlmgr install latexmk 2. VSCode安装与参数设置 安装配置同Windows。\n3. 编译论文模板 在Mac上使用latexmk -xelatex main.tex会失败，而且系统不会像Windows那样提示你需要下载哪些package，每次失败都会告诉你缺少哪个文件，这个在log中是可以看到的，一般来说在CTAN官网搜索缺少的文件就可以知道需要下载哪个package。\n下载package的代码为\n# package_name为包名，比如可能有siunitx... sudo tlmgr install package_name 这些下载的package是可以在/usr/local/texlive/2019basic/texmf-dist/tex/latex下找到的，我的可以正确运行科大LaTeX模板的package截图如下，不想一个一个搜索的可以直接对照下载缺少的package。\n最后同上测试一下能否正确生成pdf文件。\n参考：   中国科学技术大学学位论文 LaTeX 模板\n  论文写作的又一利器：VSCode + LaTeX Workshop + MikTex + Git\n  MikTeX\n  MacTeX\n  VSCode\n  ","permalink":"https://zhoutao822.github.io/posts/latex-vscode/","summary":"USTC LaTex模板编译及使用","title":"VSCode搭建LaTeX论文写作环境"},{"content":"1. Ubuntu服务器安装docker 强烈建议在ubuntu上使用apt安装docker，brew安装docker会出现很多问题\n需要安装两个关键包docker和docker-compose，前者是docker容器，后者是一个可以根据docker-compose.yml配置文件快速部署docker应用的软件，后续会使用到。\n使用sudo apt install docker.io以及sudo apt install docker-compose安装（如果你想尝试使用brew也可以按照以下方式使用）。\n首先查看一下docker相关包\nubuntu@VM-0-9-ubuntu ~ brew search docker ==\u0026gt; Formulae docker docker-ls docker-machine-parallels docker-clean docker-machine docker-slim docker-completion docker-machine-completion docker-squash docker-compose docker-machine-driver-hyperkit docker-swarm docker-compose-completion docker-machine-driver-vmware docker2aci docker-credential-helper docker-machine-driver-vultr dockerize docker-credential-helper-ecr docker-machine-driver-xhyve lazydocker docker-gen docker-machine-nfs  ==\u0026gt; Casks homebrew/cask-versions/docker-edge homebrew/cask/docker-toolbox homebrew/cask/docker 执行brew install docker以及brew install docker-compose\n安装完成查看版本信息并开启docker服务sudo systemctl stop docker，然后可以执行docker run hello-world测试docker是否可以正常运行\nubuntu@VM-0-9-ubuntu ~ docker-compose -v docker-compose version 1.25.1, build unknown ubuntu@VM-0-9-ubuntu ~ docker -v Docker version 19.03.5, build 633a0ea ubuntu@VM-0-9-ubuntu ~ sudo systemctl stop docker  ubuntu@VM-0-9-ubuntu ~ docker run hello-world Unable to find image \u0026#39;hello-world:latest\u0026#39; locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:d1668a9a1f5b42ed3f46b70b9cb7c88fd8bdc8a2d73509bb0041cf436018fbf5 Status: Downloaded newer image for hello-world:latest  Hello from Docker! This message shows that your installation appears to be working correctly. 2. 配置docker-compose Chevereto支持通过docker部署，这样方便进行管理而且不会影响服务器环境，数据保存和导入也更加方便。使用docker-compose可以快速部署，并且配置一些数据卷挂载以及依赖容器等等。\n首先在根目录下创建一个隐藏文件夹.chevereto存放我们的配置文件以及挂载的数据卷，进入.chevereto目录，并新建一个docker-compose.yml文件，以及三个文件夹chevereto_images、conf、database，docker-compose.yml内容如下：\nversion: \u0026#39;3\u0026#39;  services:  db:  image: mariadb  container_name: chevereto-mysql  # 挂载容器中的mysql数据卷到本地database文件夹  volumes:  - ./database:/var/lib/mysql:rw  restart: always  networks:  - chevereto-net  # 设置容器中的mysql的root用户密码以及其他用户  environment:  MYSQL_ROOT_PASSWORD: root  MYSQL_DATABASE: chevereto  MYSQL_USER: chevereto  MYSQL_PASSWORD: chevereto   chevereto:  depends_on:  - db  image: nmtan/chevereto  container_name: chevereto  restart: always  networks:  - chevereto-net  # 设置CHEVERETO_DB的一些参数  environment:  CHEVERETO_DB_HOST: db  CHEVERETO_DB_USERNAME: chevereto  CHEVERETO_DB_PASSWORD: chevereto  CHEVERETO_DB_NAME: chevereto  CHEVERETO_DB_PREFIX: chv_  # 挂载容器中的images文件夹到本地的chevereto_images文件夹，以及  # 将本地的conf/upload.ini配置文件挂载到容器的/usr/local/etc/php/conf.d/中  volumes:  - ./chevereto_images:/var/www/html/images:rw  - ./conf/upload.ini:/usr/local/etc/php/conf.d/upload.ini:ro  # 端口映射，本机:容器，需要配置安全组  ports:  - 7777:80  networks:  chevereto-net: volumes:  database:  chevereto_images: 我们创建的三个文件夹分别挂载了不同的容器文件夹，chevereto_images和database用于数据迁移，/conf/upload.ini用于配置上传文件限制。\n在conf目录中创建upload.ini，这个可以取消2MB文件上传限制，内容如下：\nPHP: max_execution_time = 60; memory_limit = 256M; upload_max_filesize = 256M; post_max_size = 256M; 然后修改权限sudo chown -R www-data:www-data database chevereto_images conf，最后启动docker-compose up -d，然后就可以通过IP+端口号访问chevereto图床了（应该只能通过http访问，https是不可以的）。首次登录如下：\n修改语言为中文\n可以看到文件上传大小被修改为上面的uploda.ini的内容了\n3. 数据迁移 上面我们的database文件夹保存的是我们的账号信息、配置信息等等，chevereto_images保存了我们上传的图片数据，如果我们需要从当前服务器迁移到另一个服务器只需要保存好.chevereto中的所有内容，然后全部放到另一个服务器的.chevereto目录中，同样设置权限，然后安装docker和docker-compose，然后执行docker-compose up -d就可以直接运行，我们的数据也会一起同步过来。\n参考：  Chevereto Free Docker 使用Docker轻松搭建个人图床chevereto  ","permalink":"https://zhoutao822.github.io/posts/chevereto/","summary":"chevereto是具有拖放上传、多服务器支持、图像审核、图像分类、用户帐户、私人相册等功能的卓越的图像上传工具","title":"使用Docker方式安装chevereto图床"},{"content":"1. Ubuntu服务器安装docker 参考Docker方式安装chevereto图床\n2. 配置docker-compose 首先在根目录下创建一个隐藏文件夹.seafile存放我们的配置文件以及挂载的数据卷，进入.seafile目录，并新建一个docker-compose.yml文件，docker-compose.yml内容如下，需要自行配置管理员账号和密码（尽量不要修改80:80端口映射，我修改为其他端口号会导致拒绝访问），seafile-mysql、seafile-data启动后会自动生成：\nversion: \u0026#39;2.0\u0026#39; services:  db:  image: mariadb:10.1  container_name: seafile-mysql  environment:  - MYSQL_ROOT_PASSWORD=root  # Requested, set the root\u0026#39;s password of MySQL service.  - MYSQL_LOG_CONSOLE=true  # 挂载容器mysql数据到本地文件夹seafile-mysql  volumes:  - ./seafile-mysql:/var/lib/mysql  # Requested, specifies the path to MySQL data persistent store.  networks:  - seafile-net   memcached:  image: memcached:1.5.6  container_name: seafile-memcached  entrypoint: memcached -m 256  networks:  - seafile-net   seafile:  image: seafileltd/seafile-mc  container_name: seafile  ports:  - \u0026#34;80:80\u0026#34;  # - \u0026#34;443:443\u0026#34; # If https is enabled, cancel the comment.  # 挂载云盘数据到本地文件夹seafile-data  volumes:  - ./seafile-data:/shared  # Requested, specifies the path to Seafile data persistent store.  environment:  - DB_HOST=db  - DB_ROOT_PASSWD=root  # Requested, the value shuold be root\u0026#39;s password of MySQL service.  #- TIME_ZONE=Asia/Shanghai # Optional, default is UTC. Should be uncomment and set to your local time zone.  - SEAFILE_ADMIN_EMAIL=aaa@aaa.com # Specifies Seafile admin user, default is \u0026#39;me@example.com\u0026#39;.  - SEAFILE_ADMIN_PASSWORD=password  # Specifies Seafile admin password, default is \u0026#39;asecret\u0026#39;.  - SEAFILE_SERVER_LETSENCRYPT=false  # Whether use letsencrypt to generate cert.  - SEAFILE_SERVER_HOSTNAME=175.24.47.141 # Specifies your host name.  depends_on:  - db  - memcached  networks:  - seafile-net  networks:  seafile-net: 不用修改权限，最后启动docker-compose up -d，然后就可以通过IP+端口号（如果配置了域名也可以用域名）访问seafile云盘了（应该只能通过http访问，https是不可以的，除非配置过）。首次登录如下：\n测试上传文件\n3. 数据迁移 同理，上面我们的seafile-mysql文件夹保存的是我们的账号信息等等，seafile-data保存了我们上传的文件数据、日志信息，如果我们需要从当前服务器迁移到另一个服务器只需要保存好.seafile中的所有内容，然后全部放到另一个服务器的.seafile目录中，不用设置权限，然后安装docker和docker-compose，然后执行docker-compose up -d就可以直接运行，我们的数据也会一起同步过来。\n4. 启动seafile容器出错 如果启动seafile容器后无法访问，需要重新配置时，务必先执行docker-compose kill和docker-compose rm停止并删除容器，再删除掉seafile-mysql和seafile-data两个文件夹，之后再重新启动docker-compose up -d。\n参考： 用 Docker 部署 Seafile 服务\n","permalink":"https://zhoutao822.github.io/posts/seafile/","summary":"Seafile是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问","title":"使用Docker方式安装Seafile私人网盘"},{"content":"1. Multipass \u0026amp;\u0026amp; K3s \u0026amp;\u0026amp; k9s 1.1 Multipass说明 Multipass是一个轻量级的可以用于开启Ubuntu虚拟机的命令行工具，你可以把它当做一个无图形界面的Virtual Box或者Parallels Desktop。在mac上可以通过brew安装，命令为\nbrew install --cask multipass 安装完成后执行multipass version，输出如下结果说明安装成功\n~ ❯ multipass version 20:45:29 multipass 1.8.1+mac multipassd 1.8.1+mac Multipass常见指令如下：\nLaunch an instance (by default you get the current Ubuntu LTS)\nmultipass launch --name foo Run commands in that instance, try running bash (logout or ctrl-d to quit)\nmultipass exec foo -- lsb_release -a Pass a cloud-init metadata file to an instance on launch. See using cloud-init with multipass for more details\nmultipass launch -n bar --cloud-init cloud-config.yaml See your instances\nmultipass list Stop and start instances\nmultipass stop foo bar multipass start foo Clean up what you don’t need\nmultipass delete bar multipass purge Find alternate images to launch with multipass\nmultipass find Get help\nmultipass help multipass help \u0026lt;command\u0026gt; 1.2 K3s k3s用于快速搭建k8s集群，注意这里k3s不是安装到mac上的而是安装到multipass创建的Ubuntu实例中，常用k3s安装脚本如下\ncurl -sfL https://get.k3s.io | sh - 一般来说国内访问可能失败，导致无法拉取需要资源，所以可以使用国内镜像源\ncurl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - k3s常见环境变量如下\n   Environment Variable Description     INSTALL_K3S_SKIP_DOWNLOAD 如果设置为 \u0026ldquo;true \u0026ldquo;将不会下载 K3s 的哈希值或二进制。   INSTALL_K3S_SYMLINK 默认情况下，如果路径中不存在命令，将为 kubectl、crictl 和 ctr 二进制文件创建符号链接。如果设置为\u0026rsquo;skip\u0026rsquo;将不会创建符号链接，而\u0026rsquo;force\u0026rsquo;将覆盖。   INSTALL_K3S_SKIP_ENABLE 如果设置为 \u0026ldquo;true\u0026rdquo;，将不启用或启动 K3s 服务。   INSTALL_K3S_SKIP_START 如果设置为 \u0026ldquo;true \u0026ldquo;将不会启动 K3s 服务。   INSTALL_K3S_VERSION 从 Github 下载 K3s 的版本。如果没有指定，将尝试从\u0026quot;stable\u0026quot;频道下载。   INSTALL_K3S_BIN_DIR 安装 K3s 二进制文件、链接和卸载脚本的目录，或者使用/usr/local/bin作为默认目录。   INSTALL_K3S_BIN_DIR_READ_ONLY 如果设置为 true 将不会把文件写入INSTALL_K3S_BIN_DIR，强制设置INSTALL_K3S_SKIP_DOWNLOAD=true。   INSTALL_K3S_SYSTEMD_DIR 安装 systemd 服务和环境文件的目录，或者使用/etc/systemd/system作为默认目录。   INSTALL_K3S_EXEC 带有标志的命令，用于在服务中启动 K3s。如果未指定命令，并且设置了K3S_URL，它将默认为“agent”。如果未设置K3S_URL，它将默认为“server”。要获得帮助，请参考此示例。   INSTALL_K3S_NAME 要创建的 systemd 服务名称，如果以服务器方式运行 k3s，则默认为\u0026rsquo;k3s\u0026rsquo;；如果以 agent 方式运行 k3s，则默认为\u0026rsquo;k3s-agent\u0026rsquo;。如果指定了服务名，则服务名将以\u0026rsquo;k3s-\u0026lsquo;为前缀。   INSTALL_K3S_TYPE 要创建的 systemd 服务类型，如果没有指定，将默认使用 K3s exec 命令。   INSTALL_K3S_SELINUX_WARN 如果设置为 true，则在没有找到 k3s-selinux 策略的情况下将继续。   INSTALL_K3S_SKIP_SELINUX_RPM 如果设置为 \u0026ldquo;true \u0026ldquo;将跳过 k3s RPM 的自动安装。   INSTALL_K3S_CHANNEL_URL 用于获取 K3s 下载网址的频道 URL。默认为 https://update.k3s.io/v1-release/channels 。   INSTALL_K3S_CHANNEL 用于获取 K3s 下载 URL 的通道。默认值为 \u0026ldquo;stable\u0026rdquo;。选项包括：stable, latest, testing。   K3S_CONFIG_FILE 指定配置文件的位置。默认目录为/etc/rancher/k3s/config.yaml。   K3S_TOKEN 用于将 server 或 agent 加入集群的共享 secret。   K3S_TOKEN_FILE 指定 cluster-secret,token 的文件目录。    1.3 multipass-k3s脚本 k3s cluster on multipass instances给出了脚本，可以直接利用multipass和k3s创建k8s集群，我做了一些修改，比如替换了国内用的镜像源、使用2个slave节点、修改内存之类\n#!/usr/bin/env bash  # Configure your settings # Name for the cluster/configuration files NAME=\u0026#34;demo-cluster\u0026#34; # Ubuntu image to use (xenial/bionic) IMAGE=\u0026#34;focal\u0026#34; # How many additional server instances to create SERVER_COUNT_MACHINE=\u0026#34;0\u0026#34; # How many agent instances to create AGENT_COUNT_MACHINE=\u0026#34;2\u0026#34; # How many CPUs to allocate to each machine SERVER_CPU_MACHINE=\u0026#34;2\u0026#34; AGENT_CPU_MACHINE=\u0026#34;1\u0026#34; # How much disk space to allocate to each machine SERVER_DISK_MACHINE=\u0026#34;5G\u0026#34; AGENT_DISK_MACHINE=\u0026#34;5G\u0026#34; # How much memory to allocate to each machine SERVER_MEMORY_MACHINE=\u0026#34;2G\u0026#34; AGENT_MEMORY_MACHINE=\u0026#34;1G\u0026#34; # Install channel to use (embedded etcd is fully supported starting with v1.19.5+k3s1) CHANNEL=stable # Preconfigured secret to join the cluster (or autogenerated if empty) SERVER_TOKEN=\u0026#34;\u0026#34; # Preconfigured secret to join the cluster (or autogenerated if empty) AGENT_TOKEN=\u0026#34;\u0026#34;   ## Nothing to change after this line if [ -x \u0026#34;$(command -v multipass.exe)\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ]; then  # Windows  MULTIPASSCMD=\u0026#34;multipass.exe\u0026#34; elif [ -x \u0026#34;$(command -v multipass)\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ]; then  # Linux/MacOS  MULTIPASSCMD=\u0026#34;multipass\u0026#34; else  echo \u0026#34;The multipass binary (multipass or multipass.exe) is not available or not in your \\$PATH\u0026#34;  exit 1 fi  if [ -z $SERVER_TOKEN ]; then  SERVER_TOKEN=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 20 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;)  echo \u0026#34;No server token given, generated server token: ${SERVER_TOKEN}\u0026#34; fi  if [ -z $AGENT_TOKEN ]; then  AGENT_TOKEN=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 20 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;)  echo \u0026#34;No agent token given, generated agent token: ${AGENT_TOKEN}\u0026#34; fi  # Check if name is given or create random string if [ -z $NAME ]; then  NAME=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 6 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;)  echo \u0026#34;No name given, generated name: ${NAME}\u0026#34; fi  echo \u0026#34;Creating cluster ${NAME}with $(( $SERVER_COUNT_MACHINE + 1 ))server(s) and ${AGENT_COUNT_MACHINE}agent(s)\u0026#34;  # Prepare cloud-init # Cloud init template read -r -d \u0026#39;\u0026#39; SERVER_INIT_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$SERVER_TOKEN K3S_AGENT_TOKEN=$AGENT_TOKEN INSTALL_K3S_EXEC=\u0026#34;server --cluster-init\u0026#34; K3S_KUBECONFIG_MODE=644 sh -\u0026#39; EOM  echo \u0026#34;$SERVER_INIT_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-init-cloud-init.yaml\u0026#34; echo \u0026#34;Cloud-init is created at ${NAME}-init-cloud-init.yaml\u0026#34;  echo \u0026#34;Creating initial server instance: k3s-server-${NAME}\u0026#34;  echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $SERVER_CPU_MACHINE--disk $SERVER_DISK_MACHINE--mem $SERVER_MEMORY_MACHINE$IMAGE--name k3s-server-$NAME--cloud-init ${NAME}-init-cloud-init.yaml\u0026#34; $MULTIPASSCMD launch --cpus $SERVER_CPU_MACHINE --disk $SERVER_DISK_MACHINE --mem $SERVER_MEMORY_MACHINE $IMAGE --name k3s-server-$NAME --cloud-init \u0026#34;${NAME}-init-cloud-init.yaml\u0026#34; if [ $? -ne 0 ]; then  echo \u0026#34;There was an error launching the instance\u0026#34;  exit 1 fi  echo \u0026#34;Checking for Node being Ready on k3s-server-${NAME}\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- /bin/bash -c \u0026#39;while [[ $(sudo k3s kubectl get nodes --no-headers 2\u0026gt;/dev/null | grep -c -v \u0026#34;NotReady\u0026#34;) -eq 0 ]]; do sleep 2; done\u0026#39; echo \u0026#34;Node is Ready on k3s-server-${NAME}\u0026#34;  # Retrieve info to join agent to cluster SERVER_IP=$($MULTIPASSCMD info k3s-server-$NAME | grep IPv4 | awk \u0026#39;{ print $2 }\u0026#39;) URL=\u0026#34;https://$(echo $SERVER_IP | sed -e \u0026#39;s/[[:space:]]//g\u0026#39;):6443\u0026#34;  # Create additional servers if [ \u0026#34;${SERVER_COUNT_MACHINE}\u0026#34; -gt 0 ]; then  read -r -d \u0026#39;\u0026#39; SERVER_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$SERVER_TOKEN K3S_AGENT_TOKEN=$AGENT_TOKEN INSTALL_K3S_EXEC=\u0026#34;server --server $URL\u0026#34; K3S_KUBECONFIG_MODE=644 sh -\u0026#39; EOM   echo \u0026#34;$SERVER_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-cloud-init.yaml\u0026#34;   echo \u0026#34;Creating ${SERVER_COUNT_MACHINE}additional server instances\u0026#34;  for i in $(eval echo \u0026#34;{1..$SERVER_COUNT_MACHINE}\u0026#34;); do  echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $SERVER_CPU_MACHINE--disk $SERVER_DISK_MACHINE--mem $SERVER_MEMORY_MACHINE$IMAGE--name k3s-server-$NAME-$i--cloud-init ${NAME}-cloud-init.yaml\u0026#34;  $MULTIPASSCMD launch --cpus $SERVER_CPU_MACHINE --disk $SERVER_DISK_MACHINE --mem $SERVER_MEMORY_MACHINE $IMAGE --name k3s-server-$NAME-$i --cloud-init \u0026#34;${NAME}-cloud-init.yaml\u0026#34;  if [ $? -ne 0 ]; then  echo \u0026#34;There was an error launching the instance\u0026#34;  exit 1  fi   echo \u0026#34;Checking for Node being Ready on k3s-server-${NAME}\u0026#34;  $MULTIPASSCMD exec k3s-server-$NAME-$i -- /bin/bash -c \u0026#39;while [[ $(sudo k3s kubectl get nodes --no-headers 2\u0026gt;/dev/null | grep -c -v \u0026#34;NotReady\u0026#34;) -eq 0 ]]; do sleep 2; done\u0026#39;  echo \u0026#34;Node is Ready on k3s-server-${NAME}-${i}\u0026#34;  done fi  if [ \u0026#34;${AGENT_COUNT_MACHINE}\u0026#34; -gt 0 ]; then  # Prepare agent cloud-init  # Cloud init template  read -r -d \u0026#39;\u0026#39; AGENT_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$AGENT_TOKEN K3S_URL=$URL sh -\u0026#39; EOM   echo \u0026#34;$AGENT_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-agent-cloud-init.yaml\u0026#34;  echo \u0026#34;Cloud-init is created at ${NAME}-agent-cloud-init.yaml\u0026#34;   for i in $(eval echo \u0026#34;{1..$AGENT_COUNT_MACHINE}\u0026#34;); do  echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $AGENT_CPU_MACHINE--disk $AGENT_DISK_MACHINE--mem $AGENT_MEMORY_MACHINE$IMAGE--name k3s-agent-$NAME-$i--cloud-init ${NAME}-agent-cloud-init.yaml\u0026#34;  $MULTIPASSCMD launch --cpus $AGENT_CPU_MACHINE --disk $AGENT_DISK_MACHINE --mem $AGENT_MEMORY_MACHINE $IMAGE --name k3s-agent-$NAME-$i --cloud-init \u0026#34;${NAME}-agent-cloud-init.yaml\u0026#34;  if [ $? -ne 0 ]; then  echo \u0026#34;There was an error launching the instance\u0026#34;  exit 1  fi  echo \u0026#34;Checking for Node k3s-agent-$NAME-$ibeing registered\u0026#34;  $MULTIPASSCMD exec k3s-server-$NAME -- bash -c \u0026#34;until sudo k3s kubectl get nodes --no-headers | grep -c k3s-agent-$NAME-$i\u0026gt;/dev/null; do sleep 2; done\u0026#34;  echo \u0026#34;Checking for Node k3s-agent-$NAME-$ibeing Ready\u0026#34;  $MULTIPASSCMD exec k3s-server-$NAME -- bash -c \u0026#34;until sudo k3s kubectl get nodes --no-headers | grep k3s-agent-$NAME-$i| grep -c -v NotReady \u0026gt;/dev/null; do sleep 2; done\u0026#34;  echo \u0026#34;Node k3s-agent-$NAME-$iis Ready on k3s-server-${NAME}\u0026#34;  done fi  $MULTIPASSCMD copy-files k3s-server-$NAME:/etc/rancher/k3s/k3s.yaml $NAME-kubeconfig-orig.yaml sed \u0026#34;/^[[:space:]]*server:/ s_:.*_: \\\u0026#34;https://$(echo $SERVER_IP | sed -e \u0026#39;s/[[:space:]]//g\u0026#39;):6443\\\u0026#34;_\u0026#34; $NAME-kubeconfig-orig.yaml \u0026gt; $NAME-kubeconfig.yaml  echo \u0026#34;k3s setup finished\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- sudo k3s kubectl get nodes echo \u0026#34;You can now use the following command to connect to your cluster\u0026#34; echo \u0026#34;$MULTIPASSCMDexec k3s-server-${NAME}-- sudo k3s kubectl get nodes\u0026#34; echo \u0026#34;Or use kubectl directly\u0026#34; echo \u0026#34;kubectl --kubeconfig ${NAME}-kubeconfig.yaml get nodes\u0026#34; 1.4 k9s K9s 提供了一个与 K8s 集群交互的终端 UI，用于简化导航、观察以及管理应用程序。K9s 会持续监控 K8s 的变化，并提供后续命令与所观察到的资源进行交互。可以利用如下GUI管理k8s\n1.5 一些问题  brew无法安装cask，超时之类，可以使用中科大的brew源； 在启用某些VPN软件时，multipass无法拉取镜像，导致无法创建Ubuntu实例或者无法安装k3s，只能关闭VPN软件； k3s启动失败，一般需要使用国内镜像源。  2. 安装与测试 步骤如下：\n Brew安装multipass、k9s和kubectl-cli； 创建k3s-launch.sh，并复制粘贴上面的脚本内容，需要自行修改以适配自己的环境； 运行bash k3s-launch.sh，等待集群部署，脚本执行成功后可以看到multipass多了3个实例，不带数字的是master节点，其他是slave节点，而且目录下多了几个文件；  ~/Projects/k3s ❯ ll 21:13:40 total 56 -rw-r--r-- 1 tao staff 216B Jan 2 14:05 demo-cluster-agent-cloud-init.yaml -rw-r--r-- 1 tao staff 283B Jan 2 14:04 demo-cluster-init-cloud-init.yaml -rw-r--r-- 1 tao staff 2.9K Jan 2 14:07 demo-cluster-kubeconfig-orig.yaml -rw-r--r-- 1 tao staff 2.9K Jan 2 14:07 demo-cluster-kubeconfig.yaml -rw-r--r--@ 1 tao staff 7.0K Jan 2 14:04 k3s-launch.sh 创建一个deploy-nginx.yaml，内容如下：  apiVersion: apps/v1 kind: Deployment metadata:  name: nginx  namespace: dev spec:  replicas: 3  selector:  matchLabels:  run: nginx  template:  metadata:  labels:  run: nginx  spec:  containers:  - image: nginx:1.17.1  name: nginx  ports:  - containerPort: 80  protocol: TCP 使用kubectl控制集群，运行如下命令  # get nodes查看节点是否存活 kubectl --kubeconfig demo-cluster-kubeconfig.yaml get nodes NAME STATUS ROLES AGE VERSION k3s-agent-demo-cluster-1 Ready \u0026lt;none\u0026gt; 7h10m v1.22.5+k3s1 k3s-agent-demo-cluster-2 Ready \u0026lt;none\u0026gt; 7h9m v1.22.5+k3s1 k3s-server-demo-cluster Ready control-plane,etcd,master 7h11m v1.22.5+k3s1 # create namespace dev创建dev命名空间 kubectl --kubeconfig demo-cluster-kubeconfig.yaml create namespace dev namespace/dev created # 创建测试pod kubectl --kubeconfig demo-cluster-kubeconfig.yaml create -f deploy-nginx.yaml deployment.apps/nginx created # 查看pod状态 kubectl --kubeconfig demo-cluster-kubeconfig.yaml get pods -n dev NAME READY STATUS RESTARTS AGE nginx-66ffc897cf-55b6d 1/1 Running 0 53s nginx-66ffc897cf-d5r29 1/1 Running 0 53s nginx-66ffc897cf-vfpkg 1/1 Running 0 53s # 创建暴露给外部的Service kubectl --kubeconfig demo-cluster-kubeconfig.yaml expose deploy nginx --name=svc-nginx --type=NodePort --port=80 --target-port=80 -n dev service/svc-nginx exposed # 查看Service状态和端口号映射 kubectl --kubeconfig demo-cluster-kubeconfig.yaml get svc svc-nginx -n dev -o wide NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR svc-nginx NodePort 10.43.227.135 \u0026lt;none\u0026gt; 80:30355/TCP 25s run=nginx # 查看master节点ip multipass list Name State IPv4 Image k3s-agent-demo-cluster-1 Running 192.168.64.16 Ubuntu 20.04 LTS 10.42.1.0 10.42.1.1 k3s-agent-demo-cluster-2 Running 192.168.64.17 Ubuntu 20.04 LTS 10.42.2.0 10.42.2.1 k3s-server-demo-cluster Running 192.168.64.15 Ubuntu 20.04 LTS 10.42.0.0 10.42.0.1 # 访问 192.168.64.15:30355，能够输出nginx信息 curl 192.168.64.15:30355 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;For online documentation and support please refer to \u0026lt;a href=\u0026#34;http://nginx.org/\u0026#34;\u0026gt;nginx.org\u0026lt;/a\u0026gt;.\u0026lt;br/\u0026gt; Commercial support is available at \u0026lt;a href=\u0026#34;http://nginx.com/\u0026#34;\u0026gt;nginx.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Thank you for using nginx.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 利用k9s查看k8s集群状态，详细玩法可以去看k9s官网  k9s --kubeconfig demo-cluster-kubeconfig.yaml -n dev pod状态\nservice状态\ndeploy状态\n参考  k3s cluster on multipass instances K3s: Lightweight Kubernetes Ubuntu VMs on demand for any workstation K3s 安装选项介绍 k9s Kubernetes CLI To Manage Your Clusters In Style!  ","permalink":"https://zhoutao822.github.io/posts/k8s-with-mac/","summary":"Run k8s on Mac with k3s and multipass","title":"K8s with Mac"},{"content":"以Ubuntu20.04为例，使用android/ndk-samples项目进行测试\n1. java 首先需要配置Java环境，如果是使用docker可以选一个自带java环境的docker镜像就行，java版本一般选java8。如果使用最新的java17，后面编译会不通过。\nUbuntu下安装openjdk命令如下，通过apt安装的jdk会被放在/usr/lib/jvm目录下，名称为java-1.8.0-openjdk-amd64：\nsudo apt install openjdk-8-jdk 如果之前安装过其他版本的jdk，那么java不会自动切换到新安装的这个版本，需要执行sudo update-alternatives --config java\nsudo update-alternatives --config java There are 4 choices for the alternative java (providing /usr/bin/java). Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/lib/jvm/zulu-17-amd64/bin/java 2173000 auto mode 1 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 1081 manual mode 2 /usr/lib/jvm/zulu-17-amd64/bin/java 2173000 manual mode Press \u0026lt;enter\u0026gt; to keep the current choice[*], or type selection number: 这里可以看到系统之安装了多个版本的jdk，默认会使用优先级最大的那个版本，除非我们输入编号手动指定，一般来说新安装的jdk并不会出现在这个列表里，需要手动加入，执行以下命令\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java 300 sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/javac 300 # 同理javac执行sudo update-alternatives --config javac  sudo update-alternatives --config java There are 3 choices for the alternative java (providing /usr/bin/java).   Selection Path Priority Status ------------------------------------------------------------ * 0 /usr/lib/jvm/zulu-17-amd64/bin/java 2173000 auto mode  1 /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/java 300 manual mode  2 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 1081 manual mode  3 /usr/lib/jvm/zulu-17-amd64/bin/java 2173000 manual mode  Press \u0026lt;enter\u0026gt; to keep the current choice[*], or type selection number: 切换完成后运行java -version来确认是否成功。\n2. sdkmanager 2.1 安装与配置 Android Studio官网给出了sdkmanager命令行工具的下载地址，截至2022.01.04，可以通过https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip链接下载。执行以下命令\nwget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip -O cmd.zip unzip cmd.zip -d android_sdk cd android_sdk mv cmdline-tools latest; mkdir cmdline-tools; mv latest cmdline-tools 最终文件路径如下\n~/android_sdk/cmdline-tools/latest \u0026gt; ls bin lib NOTICE.txt source.properties 这里有一个很神奇的地方就是需要把解压后的cmdline-tools下的所有文件移动到cmdline-tools/latest目录下，不然后续无法使用sdkmanager。然后输出一下sdk的路径\n~/android_sdk ❯ pwd /root/android_sdk 最后需要设置环境变量以及ANDROID_SDK_ROOT\nexport PATH=$PATH:/root/android_sdk/cmdline-tools/latest/bin export ANDROID_SDK_ROOT=/root/android_sdk Android Gradle 插件 4.2.0 及更高版本可在您首次构建项目时自动安装所需的 NDK 和 CMake，前提是已预先接受 NDK 和 CMake 的许可。执行下面这个命令配置licenses，后续sdkmanager才能自动下载需要的工具\nyes | sdkmanager --licenses 使用android/ndk-samples项目进行测试，clone后进入到hello-jni目录中，直接执行以下命令，会自动安装对应的gradle、ndk、cmake、platforms、build-tools之类的编译工具\n./gradlew build 2.2 其他问题 在使用android/ndk-samples项目进行测试时发现，某些项目指定了cmake的版本为3.18.1这是截至目前为止sdkmanager支持的最新版本的cmake。但是这里不能通过sudo apt install cmake或者cmake官网安装，因为这些版本的cmake中缺少了ninja工具，也是会导致测试项目无法编译通过，所以需要执行以下命令安装sdkmanager提供的cmake，并且还需要将其添加到环境变量中\nsdkmanager \u0026#34;cmake;3.18.1\u0026#34; 最终环境变量如下\nexport PATH=$PATH:/root/android_sdk/cmdline-tools/latest/bin export PATH=$PATH:/root/android_sdk/cmake/3.18.1/bin export ANDROID_SDK_ROOT=/root/android_sdk 3. dockerfile 在没有设置代理的情况下这个dockerfile的环境可以编译通过android/ndk-samples项目所有工程，如果需要设置代理，需要考虑sdkmanager的代理以及gradle中的仓库代理，这里不做过多展开，仅给出部分sdkmanager参数\n   选项 说明     --sdk_root=path 使用指定的 SDK 路径而不是包含此工具的 SDK   --channel=channel_id 纳入从 channel_0 到 channel_id（含）的所有渠道中的软件包。可用的渠道包括：0（稳定版）、1（Beta 版）、2（开发版）和 3（Canary 版）。   --include_obsolete 在列出或更新软件包时纳入已过时的软件包。 仅适用于 --list 和 --update。   --no_https 强制所有连接使用 HTTP 而不是 HTTPS。   --verbose 详细输出模式。该模式会输出错误、警告和参考性消息。   --proxy={http / socks} 通过给定类型的代理建立连接：用 http 指定一个高层级协议（如 HTTP 或 FTP）的代理，或用 socks 指定一个 SOCKS（V4 或 V5）代理。   --proxy_host={IP_address / DNS_address} 要使用的代理的 IP 或 DNS 地址。   --proxy_port=port_number 要连接到的代理端口号。    ARG DEBIAN_FRONTEND=noninteractive避免apt update/install时弹出选择框\nFROMubuntuARG DOWNLOAD_URL=https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zipARG SDK_PATH=/root/android_sdkARG CMAKE_VERSION=3.18.1ARG DEBIAN_FRONTEND=noninteractive  ENV PATH=$PATH:$SDK_PATH/cmdline-tools/latest/binENV PATH=$PATH:$SDK_PATH/cmake/$CMAKE_VERSION/binENV ANDROID_SDK_ROOT=$SDK_PATHRUN apt update -y \\  \u0026amp;\u0026amp; apt install -y openjdk-8-jdk unzip wget git \\  \u0026amp;\u0026amp; wget $DOWNLOAD_URL -O cmd.zip \\  \u0026amp;\u0026amp; unzip cmd.zip -d $SDK_PATH \\  \u0026amp;\u0026amp; rm cmd.zip \\  \u0026amp;\u0026amp; cd $SDK_PATH \\  \u0026amp;\u0026amp; mv cmdline-tools latest; mkdir cmdline-tools; mv latest cmdline-tools \\  \u0026amp;\u0026amp; yes | sdkmanager --licenses \\  \u0026amp;\u0026amp; sdkmanager \u0026#34;cmake;$CMAKE_VERSION\u0026#34;参考  sdkmanager Command line tools only android/ndk-samples ubuntu下优雅的切换JDK版本  ","permalink":"https://zhoutao822.github.io/posts/android-build-commandline/","summary":"Jenkins上没有Android Studio，只能通过命令行工具编译Android项目","title":"Build Android App with Commandline"},{"content":"1. Favicon Generator 首先为网站添加一个Icon，这里直接使用这个网站Favicon Generator. For real.，上传任意一张喜欢的图片即可生成各种平台需要的favicon。点击下载，将所有图片资源保存在static目录下\n2. PaperMod Theme Config 2.1 Favicon 在上一步保存了整个网站的Icon资源，接下来可以在config.yaml文件中配置favicon\nparams:  assets:  # disableHLJS: true # to disable highlight.js  # disableFingerprinting: true  favicon: /favicon.ico  favicon16x16: /favicon-16x16.png  favicon32x32: /favicon-32x32.png  apple_touch_icon: /apple-touch-icon.png  safari_pinned_tab: /favicon.ico   label:  text: \u0026#34;Home\u0026#34;  icon: /apple-touch-icon.png  iconHeight: 35 2.2 Taxonomies Taxonomies用于给所有博客按标签归档，默认支持三种categories、tags、series，需要在config.yaml中声明：\ntaxonomies:  category: categories  tag: tags  series: series 只需要在markdown中声明即可自动归档\n--- title: \u0026#34;Hugo On Mac\u0026#34; date: 2021-12-12T11:18:58+08:00 tags: [\u0026#34;hugo\u0026#34;, \u0026#34;github pages\u0026#34;, \u0026#34;typora\u0026#34;, \u0026#34;picgo\u0026#34;, \u0026#34;mathjax\u0026#34;, \u0026#34;utteranc\u0026#34;] categories: [\u0026#34;tools\u0026#34;] series: [\u0026#34;hugo on mac\u0026#34;] summary: \u0026#34;Hugo + Github Pages + Typora搭建Markdown博客\u0026#34; draft: false --- 开启后可以在将菜单选项展示到页面顶部，weight决定菜单顺序：\nmenu:  main:  - name: Archive  url: archives/  weight: 5  - name: Tags  url: tags/  weight: 10  - name: Categories  url: categories/  weight: 15  - name: Series  url: series/  weight: 20  - name: Search  url: search/  weight: 25 2.3 Search \u0026amp;\u0026amp; Archive Search也是PaperMod主题支持的，首先添加文件content/search.md\n--- title: \u0026#34;Search\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary url: \u0026#34;/search/\u0026#34; # description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; --- 然后修改config.yaml\noutputs:  home:  - HTML  - RSS  - JSON # is necessary 还有一些搜索相关参数保持默认即可\nparams:  fuseOpts:  isCaseSensitive: false  shouldSort: true  location: 0  distance: 1000  threshold: 0.4  minMatchCharLength: 0  keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] Archive的支持只需要添加文件content/archives.md\n--- title: \u0026#34;Archive\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- 最终效果如下：\n2.4 Archetypes Hugo支持默认模板，当执行hugo new blog.md时使用模板生成blog.md，可以在创建markdown时自动添加部分属性，修改archetypes/default.md\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} tags: [\u0026#34;\u0026#34;] categories: [\u0026#34;\u0026#34;] series: [\u0026#34;\u0026#34;] summary: \u0026#34;Summary todo\u0026#34; draft: false editPost: URL: \u0026#34;https://github.com/Zhoutao822/zhoutao822.github.io/tree/main/content/\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; appendFilePath: true --- 2.5 其他设置 baseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: Tao\u0026#39;s Notes theme: PaperMod paginate: 5  enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false  googleAnalytics: UA-123-45  minify:  disableXML: true  minifyOutput: true  params:  env: production # to enable google analytics, opengraph, twitter-cards and schema.  title: Tao\u0026#39;s Notes  description: \u0026#34;Tao\u0026#39;s learning notes\u0026#34;  keywords: [Blog, Portfolio, PaperMod]  author: Me  images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;]  DateFormat: \u0026#34;January 2, 2006\u0026#34;  defaultTheme: dark # dark, light, auto  disableThemeToggle: true   ShowReadingTime: true  ShowShareButtons: false  ShowPostNavLinks: true  ShowBreadCrumbs: true  ShowCodeCopyButtons: true  disableSpecial1stPost: false  disableScrollToTop: false  hidemeta: false  hideSummary: false  showtoc: true  tocopen: false   comments: true  utteranc:  enable: true  repo: \u0026#34;zhoutao822/zhoutao822.github.io\u0026#34;  issueTerm: \u0026#34;title\u0026#34;  theme: \u0026#34;github-dark\u0026#34;   assets:  # disableHLJS: true # to disable highlight.js  # disableFingerprinting: true  favicon: /favicon.ico  favicon16x16: /favicon-16x16.png  favicon32x32: /favicon-32x32.png  apple_touch_icon: /apple-touch-icon.png  safari_pinned_tab: /favicon.ico   label:  text: \u0026#34;Home\u0026#34;  icon: /apple-touch-icon.png  iconHeight: 35   # profile-mode  profileMode:  enabled: false # needs to be explicitly set  title: ExampleSite  subtitle: \u0026#34;This is subtitle\u0026#34;  imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34;  imageWidth: 120  imageHeight: 120  imageTitle: my image  buttons:  - name: Posts  url: posts  - name: Tags  url: tags   # home-info mode  homeInfoParams:  Title: \u0026#34;Hi there \\U0001F44B\u0026#34;  Content: Welcome to my blog   socialIcons:  - name: github  url: \u0026#34;https://github.com/Zhoutao822/\u0026#34;   analytics:  google:  SiteVerificationTag: \u0026#34;Tao\u0026#34;  bing:  SiteVerificationTag: \u0026#34;Tao\u0026#34;  yandex:  SiteVerificationTag: \u0026#34;Tao\u0026#34;   cover:  hidden: true # hide everywhere but not in structured data  hiddenInList: true # hide on list pages and home  hiddenInSingle: true # hide on single page   editPost:  URL: \u0026#34;https://github.com/Zhoutao822/zhoutao822.github.io/tree/main/content\u0026#34;  Text: \u0026#34;Suggest Changes\u0026#34; # edit text  appendFilePath: true # to append file path to Edit link   fuseOpts:  isCaseSensitive: false  shouldSort: true  location: 0  distance: 1000  threshold: 0.4  minMatchCharLength: 0  keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;]  outputs:  home:  - HTML  - RSS  - JSON  taxonomies:  category: categories  tag: tags  series: series  menu:  main:  - name: Archive  url: archives/  weight: 5  - name: Tags  url: tags/  weight: 10  - name: Categories  url: categories/  weight: 15  - name: Series  url: series/  weight: 20  - name: Search  url: search/  weight: 25 3. Mathjax Defects 3.1 mathjax.html 首先需要修改layouts/partials/mathjax.html\n{{ if .Params.mathjax }} \u0026lt;script\u0026gt;  MathJax = {  tex: {  inlineMath: [[\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;]],  processEscapes: true,  processEnvironments: true  },  displayMath: [  [\u0026#34;$$\u0026#34;, \u0026#34;$$\u0026#34;],  [\u0026#34;\\[\u0026#34;, \u0026#34;\\]\u0026#34;],  ],  svg: {  fontCache: \u0026#34;global\u0026#34;,  },  }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 需要添加processEscapes: true，否则行内数学公式无法正常显示。\n3.2 issues 属性$a_k = \\underset{a \\in A}{\\arg \\max Gain(D, a)}$。  $$ Gain\\_ratio(D, a) = \\frac{Gain(D,a)}{IV(a)} \\\\ IV(a) = -\\sum^V_{v=1}\\frac{|D^v|}{|D|} \\log_2\\frac{|D^v|}{|D|} $$  $$ Gini(D) = \\sum^{|\\mathbb{Y}|}_{k=1}\\sum_{k\u0026#39; \\neq k}p_kp_{k\u0026#39;} \\\\ = 1- \\sum^{|\\mathbb{Y}|}_{k=1}p_k^2 $$ 就算修改了mathjax.html或者使用katex，这里无法避免转义字符的问题，期望的显示效果如上，但是实际效果如下\n第一点就是数学公式中添加\\\\应该实现换行，这里换行失效，第二点就是\\_转义字符期望显示_，但是变成下角标（Gain\\_ratio），第三点就是某些公式可以在Typora中正常渲染，但是在Hugo中无法解析，推测也是跟Hugo渲染相关的问题，这个问题在Hexo中也有（结合MathType和MathJax在Hexo博客中插入数学公式），但是Hexo可以修改其源码来解决这个问题，Hugo不适合修改源码解决。所以最终结论是，在数学公式中不要使用下划线，因为会解析错误，不要使用\\\\实现公式内换行，复杂公式需要检查，当然也可以选择不要在Hugo中使用复杂公式。\n4. PicGo图床 SM.MS图床有资源限制，建议使用gitee或者github作为图床，gitee存在单张图片不能超过2MB的限制，这里就需要使用PicGo的Compress插件picgo-plugin-compress并且使用lubangitee算法，在mac上安装这个插件可能会安装不上，建议翻墙或者通过命令行安装\n# 首先要安装这些库，否则在mac上使用lubangitee压缩算法时会失败 brew install node automake autoconf libtool pkgconfig libpng nasm 然后进入到picgo目录中通过npm安装picgo-plugin-compress插件\ncd ~/Library/Application\\ Support/picgo rm -rf node_modules npm install picgo-plugin-compress --save --registry=https://registry.npm.taobao.org --ignore-scripts npm install --registry=https://registry.npm.taobao.org 如果在使用lubangitee出现以下错误时，说明上面几个库有可能漏掉了，解决方案来自mozjpeg pre-build test failed\n2022-01-06 20:18:41 [PicGo ERROR] ------Error Stack Begin------ Error: spawn /Users/tao/Library/Application Support/picgo/node_modules/mozjpeg/vendor/cjpeg ENOENT at Process.ChildProcess._handle.onexit (internal/child_process.js:264:19) at onErrorNT (internal/child_process.js:456:16) at processTicksAndRejections (internal/process/task_queues.js:84:9) -------Error Stack End------- 参考  Favicon Generator. For real. GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床 结合MathType和MathJax在Hexo博客中插入数学公式 picgo-plugin-compress  ","permalink":"https://zhoutao822.github.io/posts/hugo-theme-papermod/","summary":"PaperMod configurations, favicon generator and mathjax issues","title":"Hugo Theme PaperMod"},{"content":"1. Github Pages设置与配置 首先需要创建一个名称为{OwnerName}.github.io的Public仓库，如果仓库名称为其他，那么最终你的Github Pages的域名就不是https://{OwnerName}.github.io了，而是https://{OwnerName}.github.io/{RepoName}，而且如果这里不是Public而是Private的话，需要付费才能将Private仓库作为Github Pages使用。\n然后创建一个新的分支gh-pages，这个用于后续通过Github Action部署Hugo的静态页面，作为Github Pages的主页；也就是说我们的main分支保存整个Hugo博客工程，而gh-pages分支保存自动生成的静态页面。在仓库Setting下设置Github Pages的Source为gh-pages分支，勾选上Enforce HTTPS，最终访问的域名就是https了。\n最后clone一下这个仓库的main分支到本地即可。\n2. Hugo安装与使用 2.1 Hugo Install 直接通过brew install hugo即可，Homebrew如何安装可以参考官网Homebrew。安装完成后执行hugo version，打印结果如下表明安装成功：\n❯ hugo version hugo v0.90.1+extended darwin/arm64 BuildDate=unknown 2.2 Hugo Init 在clone仓库之后，通过命令行进入到这个仓库的目录下执行hugo new site . --force，初始化Hugo工程，日志如下：\n❯ hugo new site . --force Congratulations! Your new Hugo site is created in /Users/tao/Documents/hugo-blog. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation. 使用--force是为了能在非空目录中创建Hugo工程。\n2.3 Hugo Theme 在Hugo Theme上挑选一个自己喜欢的主题，然后通过git命令添加主题，以PaperMod为例\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 后续需要更新主题则执行\ngit submodule update --remote --merge 如果主题安装成功，则项目目录下会多一个.gitmodules文件，内容为\n❯ cat .gitmodules [submodule \u0026#34;themes/PaperMod\u0026#34;] \tpath = themes/PaperMod \turl = https://github.com/adityatelange/hugo-PaperMod.git 2.4 Hugo Config 然后修改config文件，默认情况下Hugo创建的是config.toml，这里可以删除这个文件，以config.yaml作为替代，依赖个人习惯决定即可；toml和yaml文件可以通过网站Convert TOML to YAML相互转换。\n修改baseURL为Github Pages的域名，并添加theme字段\n❯ cat config.yaml baseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: My New Hugo Site theme: PaperMod 2.4 Hugo Local Test 如果上述步骤都完成了，可以通过hugo new创建一个示例Blog\n❯ hugo new posts/my-first-post.md Content \u0026#34;/Users/tao/Documents/hugo-blog/content/posts/my-first-post.md\u0026#34; created 默认情况下Hugo会生成一些模板数据在Markdown中，比如title之类，这里如果需要把draft改为false。\n--- title: \u0026#34;My First Post\u0026#34; date: 2021-12-12T11:18:58+08:00 draft: true ---  ## Hello Hugo!  This is the first hugo blog. 最后执行hugo server，在本地部署，访问http://localhost:1313/可以查看效果\n❯ hugo server Start building sites … hugo v0.90.1+extended darwin/arm64 BuildDate=unknown | EN -------------------+----- Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 2 Sitemaps | 1 Cleaned | 0 Built in 16 ms Watching for changes in /Users/tao/Documents/hugo-blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/tao/Documents/hugo-blog/config.yaml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop PaperMod主题很丰富，需要通过config文件进行配置。\n2.5 Github Action配置 Github Action可以实现Push完成后自动编译并部署，所以需要创建文件.github/workflows/gh-pages.yml，最后将本地工程Push到gihub上即可。\nname: github pages  on:  push:  branches:  - main  # Set a branch to deploy  pull_request:  jobs:  deploy:  runs-on: ubuntu-20.04  steps:  - uses: actions/checkout@v2  with:  submodules: true # Fetch Hugo themes (true OR recursive)  fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod   - name: Setup Hugo  uses: peaceiris/actions-hugo@v2  with:  hugo-version: \u0026#39;latest\u0026#39;  # extended: true   - name: Build  run: hugo --minify   - name: Deploy  uses: peaceiris/actions-gh-pages@v3  if: github.ref == \u0026#39;refs/heads/main\u0026#39;  with:  github_token: ${{ secrets.GITHUB_TOKEN }}  publish_dir: ./public push成功后可以查看Github Action进度。\n3. Typora与PicGo 3.1 PicGo安装与配置 通过brew install picgo --cask安装PicGo，用于图片上传，这里我使用的是SM.MS图床，注册账号并生成token即可使用，可以把上传时重命名勾选上。\n3.2 Typora安装与配置 通过brew install typora --cask安装Typora，目前1.0版本后是需要付费使用，0.11版本及之前是免费的；安装完Typora之后需要设置插入图片时的操作，比如在插入本地图片时将图片自动通过PicGo上传到SM.MS图床上，那么Markdown文件中就只需要通过Url显示图片了。\n4. 其它配置 4.1 PaperMod主题配置 参考PaperMod Wiki\nbaseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: Tao\u0026#39;s Notes theme: PaperMod paginate: 5  enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false  googleAnalytics: UA-123-45  minify:  disableXML: true  minifyOutput: true  params:  env: production # to enable google analytics, opengraph, twitter-cards and schema.  title: Tao\u0026#39;s Notes  description: \u0026#34;Tao\u0026#39;s learning notes\u0026#34;  keywords: [Blog, Portfolio, PaperMod]  author: Me  # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors  images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;]  DateFormat: \u0026#34;January 2, 2006\u0026#34;  defaultTheme: auto # dark, light  disableThemeToggle: false   ShowReadingTime: true  ShowShareButtons: true  ShowPostNavLinks: true  ShowBreadCrumbs: true  ShowCodeCopyButtons: false  disableSpecial1stPost: false  disableScrollToTop: false  comments: false  hidemeta: false  hideSummary: false  showtoc: false  tocopen: false   assets:  # disableHLJS: true # to disable highlight.js  # disableFingerprinting: true  favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;  favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;  favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;  apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;  safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34;   label:  text: \u0026#34;Home\u0026#34;  icon: /apple-touch-icon.png  iconHeight: 35   # profile-mode  profileMode:  enabled: false # needs to be explicitly set  title: ExampleSite  subtitle: \u0026#34;This is subtitle\u0026#34;  imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34;  imageWidth: 120  imageHeight: 120  imageTitle: my image  buttons:  - name: Posts  url: posts  - name: Tags  url: tags   # home-info mode  homeInfoParams:  Title: \u0026#34;Hi there \\U0001F44B\u0026#34;  Content: Welcome to my blog   socialIcons:  - name: twitter  url: \u0026#34;https://twitter.com/\u0026#34;  - name: stackoverflow  url: \u0026#34;https://stackoverflow.com\u0026#34;  - name: github  url: \u0026#34;https://github.com/\u0026#34;   analytics:  google:  SiteVerificationTag: \u0026#34;XYZabc\u0026#34;  bing:  SiteVerificationTag: \u0026#34;XYZabc\u0026#34;  yandex:  SiteVerificationTag: \u0026#34;XYZabc\u0026#34;   cover:  hidden: true # hide everywhere but not in structured data  hiddenInList: true # hide on list pages and home  hiddenInSingle: true # hide on single page   editPost:  URL: \u0026#34;https://github.com/zhoutao822.github.io/content\u0026#34;  Text: \u0026#34;Suggest Changes\u0026#34; # edit text  appendFilePath: true # to append file path to Edit link   # for search  # https://fusejs.io/api/options.html  fuseOpts:  isCaseSensitive: false  shouldSort: true  location: 0  distance: 1000  threshold: 0.4  minMatchCharLength: 0  keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu:  main:  - identifier: categories  name: categories  url: /categories/  weight: 10  - identifier: tags  name: tags  url: /tags/  weight: 20  - identifier: example  name: example.org  url: https://example.org  weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma # pygmentsUseClasses: true # markup: # highlight: # # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai 4.2 MathJax支持 如果直接在Markdown中插入数学公式，在Typora中是可以正常显示，但是部署到Github Pages后是无法解析的，比如\n--- title: \u0026#34;My First Post\u0026#34; date: 2021-12-12T11:18:58+08:00 draft: false ---  ## Hello Hugo! MathJax  $$ \\cos \u0026lt;\\boldsymbol{x, y}\u0026gt; = \\frac{\\sum x_iy_i}{|\\boldsymbol{x}||\\boldsymbol{y}|} $$ 因此需要借助JS库来实现Markdown中Mathjax的渲染，参考在Hugo中使用MathJax。首先创建一个文件layouts/partials/mathjax.html\n{{ if .Params.math }} \u0026lt;script\u0026gt;  MathJax = {  tex: {  inlineMath: [[\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;]],  },  displayMath: [  [\u0026#34;$$\u0026#34;, \u0026#34;$$\u0026#34;],  [\u0026#34;\\[\u0026#34;, \u0026#34;\\]\u0026#34;],  ],  svg: {  fontCache: \u0026#34;global\u0026#34;,  },  }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 然后创建layouts/partials/extend_head.html，内容如下，引入mathjax.html；extend_head.html会被hugo自动加载到项目静态资源head.html中。\n{{- partial \u0026#34;mathjax.html\u0026#34; . }} 由于mathjax.html中使用了.Params.math，所以可以通过在Markdown文件头添加math: true字段实现按需渲染\n--- title: \u0026#34;My First Post\u0026#34; date: 2021-12-12T11:18:58+08:00 draft: false math: true --- 最后效果为\n4.3 utteranc评论系统 博客系统必不可少的就是评论系统，utteranc是一个基于Github的评论系统，它是一个Github App，它会将评论转为issue记录在仓库中，没有额外配置。首先安装\n然后创建一个文件layouts/partials/comments.html\n{{ if .Site.Params.utteranc.enable }} \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;{{ .Site.Params.utteranc.repo }}\u0026#34; issue-term=\u0026#34;{{ .Site.Params.utteranc.issueTerm }}\u0026#34; theme=\u0026#34;{{ .Site.Params.utteranc.theme }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; {{ end }} 最后修改config.yaml开启comments并且配置utteranc\nparams:  comments: true  utteranc:  enable: true  repo: \u0026#34;zhoutao822/zhoutao822.github.io\u0026#34;  issueTerm: \u0026#34;title\u0026#34;  theme: \u0026#34;github-dark\u0026#34; 可以到仓库的issue中查看到，此条评论被成功记录。\n参考  Hugo: Deploy Static Site using GitHub Actions Host on GitHub Quick Start utteranc hugo-PaperMod 在Hugo中使用MathJax 给hugo博客添加评论功能  ","permalink":"https://zhoutao822.github.io/posts/hugo-on-mac/","summary":"Hugo + Github Pages + Typora搭建Markdown博客","title":"Hugo On Mac"}]