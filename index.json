[{"content":"1. Multipass \u0026amp;\u0026amp; K3s 1.1 Multipass说明 Multipass是一个可以用于开启Ubuntu虚拟机的命令行工具，你可以把它当做一个无图形界面的Virtual Box或者Parallels Desktop。在mac上可以通过brew安装，命令为\nbrew install --cask multipass 安装完成后执行multipass version，输出如下结果说明安装成功\n~ ❯ multipass version 20:45:29 multipass 1.8.1+mac multipassd 1.8.1+mac Multipass常见指令如下：\nLaunch an instance (by default you get the current Ubuntu LTS)\nmultipass launch --name foo Run commands in that instance, try running bash (logout or ctrl-d to quit)\nmultipass exec foo -- lsb_release -a Pass a cloud-init metadata file to an instance on launch. See using cloud-init with multipass for more details\nmultipass launch -n bar --cloud-init cloud-config.yaml See your instances\nmultipass list Stop and start instances\nmultipass stop foo bar multipass start foo Clean up what you don’t need\nmultipass delete bar multipass purge Find alternate images to launch with multipass\nmultipass find Get help\nmultipass help multipass help \u0026lt;command\u0026gt; 1.2 K3s k3s用于快速搭建k8s集群，注意这里k3s不是安装到mac上的而是安装到multipass创建的Ubuntu实例中，常用k3s安装脚本如下\ncurl -sfL https://get.k3s.io | sh - 一般来说国内访问可能失败，导致无法拉取需要资源，所以可以使用国内镜像源\ncurl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - k3s常见环境变量如下\n   Environment Variable Description     INSTALL_K3S_SKIP_DOWNLOAD 如果设置为 \u0026ldquo;true \u0026ldquo;将不会下载 K3s 的哈希值或二进制。   INSTALL_K3S_SYMLINK 默认情况下，如果路径中不存在命令，将为 kubectl、crictl 和 ctr 二进制文件创建符号链接。如果设置为\u0026rsquo;skip\u0026rsquo;将不会创建符号链接，而\u0026rsquo;force\u0026rsquo;将覆盖。   INSTALL_K3S_SKIP_ENABLE 如果设置为 \u0026ldquo;true\u0026rdquo;，将不启用或启动 K3s 服务。   INSTALL_K3S_SKIP_START 如果设置为 \u0026ldquo;true \u0026ldquo;将不会启动 K3s 服务。   INSTALL_K3S_VERSION 从 Github 下载 K3s 的版本。如果没有指定，将尝试从\u0026quot;stable\u0026quot;频道下载。   INSTALL_K3S_BIN_DIR 安装 K3s 二进制文件、链接和卸载脚本的目录，或者使用/usr/local/bin作为默认目录。   INSTALL_K3S_BIN_DIR_READ_ONLY 如果设置为 true 将不会把文件写入INSTALL_K3S_BIN_DIR，强制设置INSTALL_K3S_SKIP_DOWNLOAD=true。   INSTALL_K3S_SYSTEMD_DIR 安装 systemd 服务和环境文件的目录，或者使用/etc/systemd/system作为默认目录。   INSTALL_K3S_EXEC 带有标志的命令，用于在服务中启动 K3s。如果未指定命令，并且设置了K3S_URL，它将默认为“agent”。如果未设置K3S_URL，它将默认为“server”。要获得帮助，请参考此示例。   INSTALL_K3S_NAME 要创建的 systemd 服务名称，如果以服务器方式运行 k3s，则默认为\u0026rsquo;k3s'；如果以 agent 方式运行 k3s，则默认为\u0026rsquo;k3s-agent'。如果指定了服务名，则服务名将以\u0026rsquo;k3s-\u0026lsquo;为前缀。   INSTALL_K3S_TYPE 要创建的 systemd 服务类型，如果没有指定，将默认使用 K3s exec 命令。   INSTALL_K3S_SELINUX_WARN 如果设置为 true，则在没有找到 k3s-selinux 策略的情况下将继续。   INSTALL_K3S_SKIP_SELINUX_RPM 如果设置为 \u0026ldquo;true \u0026ldquo;将跳过 k3s RPM 的自动安装。   INSTALL_K3S_CHANNEL_URL 用于获取 K3s 下载网址的频道 URL。默认为 https://update.k3s.io/v1-release/channels 。   INSTALL_K3S_CHANNEL 用于获取 K3s 下载 URL 的通道。默认值为 \u0026ldquo;stable\u0026rdquo;。选项包括：stable, latest, testing。   K3S_CONFIG_FILE 指定配置文件的位置。默认目录为/etc/rancher/k3s/config.yaml。   K3S_TOKEN 用于将 server 或 agent 加入集群的共享 secret。   K3S_TOKEN_FILE 指定 cluster-secret,token 的文件目录。    1.3 multipass-k3s脚本 k3s cluster on multipass instances给出了脚本，可以直接利用multipass和k3s创建k8s集群，我做了一些修改，比如替换了国内用的镜像源、使用2个slave节点、修改内存之类\n#!/usr/bin/env bash  # Configure your settings # Name for the cluster/configuration files NAME=\u0026#34;demo-cluster\u0026#34; # Ubuntu image to use (xenial/bionic) IMAGE=\u0026#34;focal\u0026#34; # How many additional server instances to create SERVER_COUNT_MACHINE=\u0026#34;0\u0026#34; # How many agent instances to create AGENT_COUNT_MACHINE=\u0026#34;2\u0026#34; # How many CPUs to allocate to each machine SERVER_CPU_MACHINE=\u0026#34;2\u0026#34; AGENT_CPU_MACHINE=\u0026#34;1\u0026#34; # How much disk space to allocate to each machine SERVER_DISK_MACHINE=\u0026#34;5G\u0026#34; AGENT_DISK_MACHINE=\u0026#34;5G\u0026#34; # How much memory to allocate to each machine SERVER_MEMORY_MACHINE=\u0026#34;2G\u0026#34; AGENT_MEMORY_MACHINE=\u0026#34;1G\u0026#34; # Install channel to use (embedded etcd is fully supported starting with v1.19.5+k3s1) CHANNEL=stable # Preconfigured secret to join the cluster (or autogenerated if empty) SERVER_TOKEN=\u0026#34;\u0026#34; # Preconfigured secret to join the cluster (or autogenerated if empty) AGENT_TOKEN=\u0026#34;\u0026#34; ## Nothing to change after this line if [ -x \u0026#34;$(command -v multipass.exe)\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ]; then # Windows MULTIPASSCMD=\u0026#34;multipass.exe\u0026#34; elif [ -x \u0026#34;$(command -v multipass)\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ]; then # Linux/MacOS MULTIPASSCMD=\u0026#34;multipass\u0026#34; else echo \u0026#34;The multipass binary (multipass or multipass.exe) is not available or not in your \\$PATH\u0026#34; exit 1 fi if [ -z $SERVER_TOKEN ]; then SERVER_TOKEN=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 20 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) echo \u0026#34;No server token given, generated server token: ${SERVER_TOKEN}\u0026#34; fi if [ -z $AGENT_TOKEN ]; then AGENT_TOKEN=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 20 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) echo \u0026#34;No agent token given, generated agent token: ${AGENT_TOKEN}\u0026#34; fi # Check if name is given or create random string if [ -z $NAME ]; then NAME=$(cat /dev/urandom | base64 | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 6 | head -n 1 | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) echo \u0026#34;No name given, generated name: ${NAME}\u0026#34; fi echo \u0026#34;Creating cluster ${NAME}with $(( $SERVER_COUNT_MACHINE + 1 ))server(s) and ${AGENT_COUNT_MACHINE}agent(s)\u0026#34; # Prepare cloud-init # Cloud init template read -r -d \u0026#39;\u0026#39; SERVER_INIT_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$SERVER_TOKEN K3S_AGENT_TOKEN=$AGENT_TOKEN INSTALL_K3S_EXEC=\u0026#34;server --cluster-init\u0026#34; K3S_KUBECONFIG_MODE=644 sh -\u0026#39; EOM echo \u0026#34;$SERVER_INIT_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-init-cloud-init.yaml\u0026#34; echo \u0026#34;Cloud-init is created at ${NAME}-init-cloud-init.yaml\u0026#34; echo \u0026#34;Creating initial server instance: k3s-server-${NAME}\u0026#34; echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $SERVER_CPU_MACHINE--disk $SERVER_DISK_MACHINE--mem $SERVER_MEMORY_MACHINE$IMAGE--name k3s-server-$NAME--cloud-init ${NAME}-init-cloud-init.yaml\u0026#34; $MULTIPASSCMD launch --cpus $SERVER_CPU_MACHINE --disk $SERVER_DISK_MACHINE --mem $SERVER_MEMORY_MACHINE $IMAGE --name k3s-server-$NAME --cloud-init \u0026#34;${NAME}-init-cloud-init.yaml\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;There was an error launching the instance\u0026#34; exit 1 fi echo \u0026#34;Checking for Node being Ready on k3s-server-${NAME}\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- /bin/bash -c \u0026#39;while [[ $(sudo k3s kubectl get nodes --no-headers 2\u0026gt;/dev/null | grep -c -v \u0026#34;NotReady\u0026#34;) -eq 0 ]]; do sleep 2; done\u0026#39; echo \u0026#34;Node is Ready on k3s-server-${NAME}\u0026#34; # Retrieve info to join agent to cluster SERVER_IP=$($MULTIPASSCMD info k3s-server-$NAME | grep IPv4 | awk \u0026#39;{ print $2 }\u0026#39;) URL=\u0026#34;https://$(echo $SERVER_IP | sed -e \u0026#39;s/[[:space:]]//g\u0026#39;):6443\u0026#34; # Create additional servers if [ \u0026#34;${SERVER_COUNT_MACHINE}\u0026#34; -gt 0 ]; then read -r -d \u0026#39;\u0026#39; SERVER_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$SERVER_TOKEN K3S_AGENT_TOKEN=$AGENT_TOKEN INSTALL_K3S_EXEC=\u0026#34;server --server $URL\u0026#34; K3S_KUBECONFIG_MODE=644 sh -\u0026#39; EOM echo \u0026#34;$SERVER_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-cloud-init.yaml\u0026#34; echo \u0026#34;Creating ${SERVER_COUNT_MACHINE}additional server instances\u0026#34; for i in $(eval echo \u0026#34;{1..$SERVER_COUNT_MACHINE}\u0026#34;); do echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $SERVER_CPU_MACHINE--disk $SERVER_DISK_MACHINE--mem $SERVER_MEMORY_MACHINE$IMAGE--name k3s-server-$NAME-$i--cloud-init ${NAME}-cloud-init.yaml\u0026#34; $MULTIPASSCMD launch --cpus $SERVER_CPU_MACHINE --disk $SERVER_DISK_MACHINE --mem $SERVER_MEMORY_MACHINE $IMAGE --name k3s-server-$NAME-$i --cloud-init \u0026#34;${NAME}-cloud-init.yaml\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;There was an error launching the instance\u0026#34; exit 1 fi echo \u0026#34;Checking for Node being Ready on k3s-server-${NAME}\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME-$i -- /bin/bash -c \u0026#39;while [[ $(sudo k3s kubectl get nodes --no-headers 2\u0026gt;/dev/null | grep -c -v \u0026#34;NotReady\u0026#34;) -eq 0 ]]; do sleep 2; done\u0026#39; echo \u0026#34;Node is Ready on k3s-server-${NAME}-${i}\u0026#34; done fi if [ \u0026#34;${AGENT_COUNT_MACHINE}\u0026#34; -gt 0 ]; then # Prepare agent cloud-init # Cloud init template read -r -d \u0026#39;\u0026#39; AGENT_CLOUDINIT_TEMPLATE \u0026lt;\u0026lt; EOM #cloud-config runcmd: - \u0026#39;\\curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_CHANNEL=$CHANNEL K3S_TOKEN=$AGENT_TOKEN K3S_URL=$URL sh -\u0026#39; EOM echo \u0026#34;$AGENT_CLOUDINIT_TEMPLATE\u0026#34; \u0026gt; \u0026#34;${NAME}-agent-cloud-init.yaml\u0026#34; echo \u0026#34;Cloud-init is created at ${NAME}-agent-cloud-init.yaml\u0026#34; for i in $(eval echo \u0026#34;{1..$AGENT_COUNT_MACHINE}\u0026#34;); do echo \u0026#34;Running $MULTIPASSCMDlaunch --cpus $AGENT_CPU_MACHINE--disk $AGENT_DISK_MACHINE--mem $AGENT_MEMORY_MACHINE$IMAGE--name k3s-agent-$NAME-$i--cloud-init ${NAME}-agent-cloud-init.yaml\u0026#34; $MULTIPASSCMD launch --cpus $AGENT_CPU_MACHINE --disk $AGENT_DISK_MACHINE --mem $AGENT_MEMORY_MACHINE $IMAGE --name k3s-agent-$NAME-$i --cloud-init \u0026#34;${NAME}-agent-cloud-init.yaml\u0026#34; if [ $? -ne 0 ]; then echo \u0026#34;There was an error launching the instance\u0026#34; exit 1 fi echo \u0026#34;Checking for Node k3s-agent-$NAME-$ibeing registered\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- bash -c \u0026#34;until sudo k3s kubectl get nodes --no-headers | grep -c k3s-agent-$NAME-$i\u0026gt;/dev/null; do sleep 2; done\u0026#34; echo \u0026#34;Checking for Node k3s-agent-$NAME-$ibeing Ready\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- bash -c \u0026#34;until sudo k3s kubectl get nodes --no-headers | grep k3s-agent-$NAME-$i| grep -c -v NotReady \u0026gt;/dev/null; do sleep 2; done\u0026#34; echo \u0026#34;Node k3s-agent-$NAME-$iis Ready on k3s-server-${NAME}\u0026#34; done fi $MULTIPASSCMD copy-files k3s-server-$NAME:/etc/rancher/k3s/k3s.yaml $NAME-kubeconfig-orig.yaml sed \u0026#34;/^[[:space:]]*server:/ s_:.*_: \\\u0026#34;https://$(echo $SERVER_IP | sed -e \u0026#39;s/[[:space:]]//g\u0026#39;):6443\\\u0026#34;_\u0026#34; $NAME-kubeconfig-orig.yaml \u0026gt; $NAME-kubeconfig.yaml echo \u0026#34;k3s setup finished\u0026#34; $MULTIPASSCMD exec k3s-server-$NAME -- sudo k3s kubectl get nodes echo \u0026#34;You can now use the following command to connect to your cluster\u0026#34; echo \u0026#34;$MULTIPASSCMDexec k3s-server-${NAME}-- sudo k3s kubectl get nodes\u0026#34; echo \u0026#34;Or use kubectl directly\u0026#34; echo \u0026#34;kubectl --kubeconfig ${NAME}-kubeconfig.yaml get nodes\u0026#34; 1.4 一些问题  brew无法安装cask，超时之类，可以使用中科大的brew源； 在启用某些VPN软件时，multipass无法拉取镜像，导致无法创建Ubuntu实例或者无法安装k3s，只能关闭VPN软件； k3s启动失败，一般需要使用国内镜像源。  2. 安装与测试 步骤如下：\n Brew安装multipass和kubectl-cli； 创建k3s-launch.sh，并复制粘贴上面的脚本内容，需要自行修改以适配自己的环境； 运行bash k3s-launch.sh，等待集群部署，脚本执行成功后可以看到multipass多了3个实例，不带数字的是master节点，其他是slave节点，而且目录下多了几个文件；  ~/Projects/k3s ❯ ll 21:13:40 total 56 -rw-r--r-- 1 tao staff 216B Jan 2 14:05 demo-cluster-agent-cloud-init.yaml -rw-r--r-- 1 tao staff 283B Jan 2 14:04 demo-cluster-init-cloud-init.yaml -rw-r--r-- 1 tao staff 2.9K Jan 2 14:07 demo-cluster-kubeconfig-orig.yaml -rw-r--r-- 1 tao staff 2.9K Jan 2 14:07 demo-cluster-kubeconfig.yaml -rw-r--r--@ 1 tao staff 7.0K Jan 2 14:04 k3s-launch.sh 创建一个deploy-nginx.yaml，内容如下：  apiVersion: apps/v1 kind: Deployment metadata: name: nginx namespace: dev spec: replicas: 3 selector: matchLabels: run: nginx template: metadata: labels: run: nginx spec: containers: - image: nginx:1.17.1 name: nginx ports: - containerPort: 80 protocol: TCP 使用kubectl控制集群，运行如下命令  # get nodes查看节点是否存活 ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml get nodes ⎈ docker-desktop 21:13:53 NAME STATUS ROLES AGE VERSION k3s-agent-demo-cluster-1 Ready \u0026lt;none\u0026gt; 7h10m v1.22.5+k3s1 k3s-agent-demo-cluster-2 Ready \u0026lt;none\u0026gt; 7h9m v1.22.5+k3s1 k3s-server-demo-cluster Ready control-plane,etcd,master 7h11m v1.22.5+k3s1 # create namespace dev创建dev命名空间 ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml create namespace dev namespace/dev created # 创建测试pod ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml create -f deploy-nginx.yaml ⎈ docker-desktop 21:48:22 deployment.apps/nginx created # 查看pod状态 ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml get pods -n dev ⎈ docker-desktop 21:48:32 NAME READY STATUS RESTARTS AGE nginx-66ffc897cf-55b6d 1/1 Running 0 53s nginx-66ffc897cf-d5r29 1/1 Running 0 53s nginx-66ffc897cf-vfpkg 1/1 Running 0 53s # 创建暴露给外部的Service ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml expose deploy nginx --name=svc-nginx --type=NodePort --port=80 --target-port=80 -n dev service/svc-nginx exposed # 查看Service状态和端口号映射 ~/Projects/k3s ❯ kubectl --kubeconfig demo-cluster-kubeconfig.yaml get svc svc-nginx -n dev -o wide ⎈ docker-desktop 21:50:14 NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR svc-nginx NodePort 10.43.227.135 \u0026lt;none\u0026gt; 80:30355/TCP 25s run=nginx # 查看master节点ip ~/Projects/k3s ❯ multipass list 21:50:39 Name State IPv4 Image k3s-agent-demo-cluster-1 Running 192.168.64.16 Ubuntu 20.04 LTS 10.42.1.0 10.42.1.1 k3s-agent-demo-cluster-2 Running 192.168.64.17 Ubuntu 20.04 LTS 10.42.2.0 10.42.2.1 k3s-server-demo-cluster Running 192.168.64.15 Ubuntu 20.04 LTS 10.42.0.0 10.42.0.1 # 访问 192.168.64.15:30355，能够输出nginx信息 ~/Projects/k3s ❯ curl 192.168.64.15:30355 21:51:45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;For online documentation and support please refer to \u0026lt;a href=\u0026#34;http://nginx.org/\u0026#34;\u0026gt;nginx.org\u0026lt;/a\u0026gt;.\u0026lt;br/\u0026gt; Commercial support is available at \u0026lt;a href=\u0026#34;http://nginx.com/\u0026#34;\u0026gt;nginx.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Thank you for using nginx.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 参考  k3s cluster on multipass instances K3s: Lightweight Kubernetes Ubuntu VMs on demand for any workstation K3s 安装选项介绍  ","permalink":"https://zhoutao822.github.io/posts/k3s-on-mac/","summary":"Run k8s on Mac with k3s and multipass","title":"K3s on Mac"},{"content":"1. Favicon Generator 首先为网站添加一个Icon，这里直接使用这个网站Favicon Generator. For real.，上传任意一张喜欢的图片即可生成各种平台需要的favicon。点击下载，将所有图片资源保存在static目录下\n2. PaperMod Theme Config 2.1 Favicon 在上一步保存了整个网站的Icon资源，接下来可以在config.yaml文件中配置favicon\nparams: assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: /favicon.ico favicon16x16: /favicon-16x16.png favicon32x32: /favicon-32x32.png apple_touch_icon: /apple-touch-icon.png safari_pinned_tab: /favicon.ico label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 2.2 Taxonomies Taxonomies用于给所有博客按标签归档，默认支持三种categories、tags、series，需要在config.yaml中声明：\ntaxonomies: category: categories tag: tags series: series 只需要在markdown中声明即可自动归档\n--- title: \u0026quot;Hugo On Mac\u0026quot; date: 2021-12-12T11:18:58+08:00 tags: [\u0026quot;hugo\u0026quot;, \u0026quot;github pages\u0026quot;, \u0026quot;typora\u0026quot;, \u0026quot;picgo\u0026quot;, \u0026quot;mathjax\u0026quot;, \u0026quot;utteranc\u0026quot;] categories: [\u0026quot;tools\u0026quot;] series: [\u0026quot;hugo on mac\u0026quot;] summary: \u0026quot;Hugo + Github Pages + Typora搭建Markdown博客\u0026quot; draft: false --- 开启后可以在将菜单选项展示到页面顶部，weight决定菜单顺序：\nmenu: main: - name: Archive url: archives/ weight: 5 - name: Tags url: tags/ weight: 10 - name: Categories url: categories/ weight: 15 - name: Series url: series/ weight: 20 - name: Search url: search/ weight: 25 2.3 Search \u0026amp;\u0026amp; Archive Search也是PaperMod主题支持的，首先添加文件content/search.md\n--- title: \u0026quot;Search\u0026quot; # in any language you want layout: \u0026quot;search\u0026quot; # is necessary url: \u0026quot;/search/\u0026quot; # description: \u0026quot;Description for Search\u0026quot; summary: \u0026quot;search\u0026quot; --- 然后修改config.yaml\noutputs: home: - HTML - RSS - JSON # is necessary 还有一些搜索相关参数保持默认即可\nparams: fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] Archive的支持只需要添加文件content/archives.md\n--- title: \u0026quot;Archive\u0026quot; layout: \u0026quot;archives\u0026quot; url: \u0026quot;/archives/\u0026quot; summary: archives --- 最终效果如下：\n2.4 Archetypes Hugo支持默认模板，当执行hugo new blog.md时使用模板生成blog.md，可以在创建markdown时自动添加部分属性，修改archetypes/default.md\n--- title: \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date: {{ .Date }} tags: [\u0026quot;\u0026quot;] categories: [\u0026quot;\u0026quot;] series: [\u0026quot;\u0026quot;] summary: \u0026quot;Summary todo\u0026quot; draft: false editPost: URL: \u0026quot;https://github.com/Zhoutao822/zhoutao822.github.io/tree/main/content/\u0026quot; Text: \u0026quot;Suggest Changes\u0026quot; appendFilePath: true --- 2.5 其他设置 baseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: Tao\u0026#39;s Notes theme: PaperMod paginate: 5 enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: Tao\u0026#39;s Notes description: \u0026#34;Tao\u0026#39;s learning notes\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Me images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: dark # dark, light, auto disableThemeToggle: true ShowReadingTime: true ShowShareButtons: false ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: true disableSpecial1stPost: false disableScrollToTop: false hidemeta: false hideSummary: false showtoc: true tocopen: false comments: true utteranc: enable: true repo: \u0026#34;zhoutao822/zhoutao822.github.io\u0026#34; issueTerm: \u0026#34;title\u0026#34; theme: \u0026#34;github-dark\u0026#34; assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: /favicon.ico favicon16x16: /favicon-16x16.png favicon32x32: /favicon-32x32.png apple_touch_icon: /apple-touch-icon.png safari_pinned_tab: /favicon.ico label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to my blog socialIcons: - name: github url: \u0026#34;https://github.com/Zhoutao822/\u0026#34; analytics: google: SiteVerificationTag: \u0026#34;Tao\u0026#34; bing: SiteVerificationTag: \u0026#34;Tao\u0026#34; yandex: SiteVerificationTag: \u0026#34;Tao\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page editPost: URL: \u0026#34;https://github.com/Zhoutao822/zhoutao822.github.io/tree/main/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] outputs: home: - HTML - RSS - JSON taxonomies: category: categories tag: tags series: series menu: main: - name: Archive url: archives/ weight: 5 - name: Tags url: tags/ weight: 10 - name: Categories url: categories/ weight: 15 - name: Series url: series/ weight: 20 - name: Search url: search/ weight: 25 3. Mathjax Defects 3.1 mathjax.html 首先需要修改layouts/partials/mathjax.html\n{{ if .Params.mathjax }} \u0026lt;script\u0026gt; MathJax = { tex: { inlineMath: [[\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;]], processEscapes: true, processEnvironments: true }, displayMath: [ [\u0026#34;$$\u0026#34;, \u0026#34;$$\u0026#34;], [\u0026#34;\\[\u0026#34;, \u0026#34;\\]\u0026#34;], ], svg: { fontCache: \u0026#34;global\u0026#34;, }, }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 需要添加processEscapes: true，否则行内数学公式无法正常显示。\n3.2 issues 属性$a_k = \\underset{a \\in A}{\\arg \\max Gain(D, a)}$。 $$ Gain\\_ratio(D, a) = \\frac{Gain(D,a)}{IV(a)} \\\\ IV(a) = -\\sum^V_{v=1}\\frac{|D^v|}{|D|} \\log_2\\frac{|D^v|}{|D|} $$ $$ Gini(D) = \\sum^{|\\mathbb{Y}|}_{k=1}\\sum_{k\u0026#39; \\neq k}p_kp_{k\u0026#39;} \\\\ = 1- \\sum^{|\\mathbb{Y}|}_{k=1}p_k^2 $$ 就算修改了mathjax.html或者使用katex，这里无法避免转义字符的问题，期望的显示效果如上，但是实际效果如下\n第一点就是数学公式中添加\\\\应该实现换行，这里换行失效，第二点就是\\_转义字符期望显示_，但是变成下角标（Gain\\_ratio），第三点就是某些公式可以在Typora中正常渲染，但是在Hugo中无法解析，推测也是跟Hugo渲染相关的问题，这个问题在Hexo中也有（结合MathType和MathJax在Hexo博客中插入数学公式），但是Hexo可以修改其源码来解决这个问题，Hugo不适合修改源码解决。所以最终结论是，在数学公式中不要使用下划线，因为会解析错误，不要使用\\\\实现公式内换行，复杂公式需要检查，当然也可以选择不要在Hugo中使用复杂公式。\n4. PicGo图床 SM.MS图床有资源限制，建议使用gitee或者github作为图床，gitee存在单张图片不能超过2MB的限制，这里就需要使用PicGo的Compress插件picgo-plugin-compress，在mac上安装这个插件可能会安装不上，建议翻墙或者通过命令行安装\n❯ cd ~/Library/Application\\ Support/picgo ❯ rm -rf node_modules ❯ npm install picgo-plugin-compress --save --registry=https://registry.npm.taobao.org --ignore-scripts ❯ npm install --registry=https://registry.npm.taobao.org 参考  Favicon Generator. For real. GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床 结合MathType和MathJax在Hexo博客中插入数学公式 picgo-plugin-compress  ","permalink":"https://zhoutao822.github.io/posts/hugo-theme-papermod/","summary":"PaperMod configurations, favicon generator and mathjax issues","title":"Hugo Theme PaperMod"},{"content":"1. Github Pages设置与配置 首先需要创建一个名称为{OwnerName}.github.io的Public仓库，如果仓库名称为其他，那么最终你的Github Pages的域名就不是https://{OwnerName}.github.io了，而是https://{OwnerName}.github.io/{RepoName}，而且如果这里不是Public而是Private的话，需要付费才能将Private仓库作为Github Pages使用。\n然后创建一个新的分支gh-pages，这个用于后续通过Github Action部署Hugo的静态页面，作为Github Pages的主页；也就是说我们的main分支保存整个Hugo博客工程，而gh-pages分支保存自动生成的静态页面。在仓库Setting下设置Github Pages的Source为gh-pages分支，勾选上Enforce HTTPS，最终访问的域名就是https了。\n最后clone一下这个仓库的main分支到本地即可。\n2. Hugo安装与使用 2.1 Hugo Install 直接通过brew install hugo即可，Homebrew如何安装可以参考官网Homebrew。安装完成后执行hugo version，打印结果如下表明安装成功：\n❯ hugo version hugo v0.90.1+extended darwin/arm64 BuildDate=unknown 2.2 Hugo Init 在clone仓库之后，通过命令行进入到这个仓库的目录下执行hugo new site . --force，初始化Hugo工程，日志如下：\n❯ hugo new site . --force Congratulations! Your new Hugo site is created in /Users/tao/Documents/hugo-blog. Just a few more steps and you're ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026quot;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026quot; command. 2. Perhaps you want to add some content. You can add single files with \u0026quot;hugo new \u0026lt;SECTIONNAME\u0026gt;/\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026quot;. 3. Start the built-in live server via \u0026quot;hugo server\u0026quot;. Visit https://gohugo.io/ for quickstart guide and full documentation. 使用--force是为了能在非空目录中创建Hugo工程。\n2.3 Hugo Theme 在Hugo Theme上挑选一个自己喜欢的主题，然后通过git命令添加主题，以PaperMod为例\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 后续需要更新主题则执行\ngit submodule update --remote --merge 如果主题安装成功，则项目目录下会多一个.gitmodules文件，内容为\n❯ cat .gitmodules [submodule \u0026#34;themes/PaperMod\u0026#34;] path = themes/PaperMod url = https://github.com/adityatelange/hugo-PaperMod.git 2.4 Hugo Config 然后修改config文件，默认情况下Hugo创建的是config.toml，这里可以删除这个文件，以config.yaml作为替代，依赖个人习惯决定即可；toml和yaml文件可以通过网站Convert TOML to YAML相互转换。\n修改baseURL为Github Pages的域名，并添加theme字段\n❯ cat config.yaml baseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: My New Hugo Site theme: PaperMod 2.4 Hugo Local Test 如果上述步骤都完成了，可以通过hugo new创建一个示例Blog\n❯ hugo new posts/my-first-post.md Content \u0026#34;/Users/tao/Documents/hugo-blog/content/posts/my-first-post.md\u0026#34; created 默认情况下Hugo会生成一些模板数据在Markdown中，比如title之类，这里如果需要把draft改为false。\n--- title: \u0026#34;My First Post\u0026#34; date: 2021-12-12T11:18:58+08:00 draft: true --- ## Hello Hugo!  This is the first hugo blog. 最后执行hugo server，在本地部署，访问http://localhost:1313/可以查看效果\n❯ hugo server Start building sites … hugo v0.90.1+extended darwin/arm64 BuildDate=unknown | EN -------------------+----- Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 2 Sitemaps | 1 Cleaned | 0 Built in 16 ms Watching for changes in /Users/tao/Documents/hugo-blog/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/tao/Documents/hugo-blog/config.yaml Environment: \u0026quot;development\u0026quot; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop PaperMod主题很丰富，需要通过config文件进行配置。\n2.5 Github Action配置 Github Action可以实现Push完成后自动编译并部署，所以需要创建文件.github/workflows/gh-pages.yml，最后将本地工程Push到gihub上即可。\nname: github pages on: push: branches: - main  # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public push成功后可以查看Github Action进度。\n3. Typora与PicGo 3.1 PicGo安装与配置 通过brew install picgo --cask安装PicGo，用于图片上传，这里我使用的是SM.MS图床，注册账号并生成token即可使用，可以把上传时重命名勾选上。\n3.2 Typora安装与配置 通过brew install typora --cask安装Typora，目前1.0版本后是需要付费使用，0.11版本及之前是免费的；安装完Typora之后需要设置插入图片时的操作，比如在插入本地图片时将图片自动通过PicGo上传到SM.MS图床上，那么Markdown文件中就只需要通过Url显示图片了。\n4. 其它配置 4.1 PaperMod主题配置 参考PaperMod Wiki\nbaseURL: \u0026#39;https://zhoutao822.github.io/\u0026#39; languageCode: en-us title: Tao\u0026#39;s Notes theme: PaperMod paginate: 5 enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false googleAnalytics: UA-123-45 minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: Tao\u0026#39;s Notes description: \u0026#34;Tao\u0026#39;s learning notes\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Me # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; label: text: \u0026#34;Home\u0026#34; icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to my blog socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: stackoverflow url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; analytics: google: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; bing: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; yandex: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page editPost: URL: \u0026#34;https://github.com/zhoutao822.github.io/content\u0026#34; Text: \u0026#34;Suggest Changes\u0026#34; # edit text appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: categories name: categories url: /categories/ weight: 10 - identifier: tags name: tags url: /tags/ weight: 20 - identifier: example name: example.org url: https://example.org weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma # pygmentsUseClasses: true # markup: # highlight: # # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai 4.2 MathJax支持 如果直接在Markdown中插入数学公式，在Typora中是可以正常显示，但是部署到Github Pages后是无法解析的，比如\n--- title: \u0026#34;My First Post\u0026#34; date: 2021-12-12T11:18:58+08:00 draft: false --- ## Hello Hugo! MathJax  $$ \\cos \u0026lt;\\boldsymbol{x, y}\u0026gt; = \\frac{\\sum x_iy_i}{|\\boldsymbol{x}||\\boldsymbol{y}|} $$ 因此需要借助JS库来实现Markdown中Mathjax的渲染，参考在Hugo中使用MathJax。首先创建一个文件layouts/partials/mathjax.html\n{{ if .Params.math }} \u0026lt;script\u0026gt; MathJax = { tex: { inlineMath: [[\u0026#34;$\u0026#34;, \u0026#34;$\u0026#34;]], }, displayMath: [ [\u0026#34;$$\u0026#34;, \u0026#34;$$\u0026#34;], [\u0026#34;\\[\u0026#34;, \u0026#34;\\]\u0026#34;], ], svg: { fontCache: \u0026#34;global\u0026#34;, }, }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 然后创建layouts/partials/extend_head.html，内容如下，引入mathjax.html；extend_head.html会被hugo自动加载到项目静态资源head.html中。\n{{- partial \u0026#34;mathjax.html\u0026#34; . }} 由于mathjax.html中使用了.Params.math，所以可以通过在Markdown文件头添加math: true字段实现按需渲染\n--- title: \u0026quot;My First Post\u0026quot; date: 2021-12-12T11:18:58+08:00 draft: false math: true --- 最后效果为\n4.3 utteranc评论系统 博客系统必不可少的就是评论系统，utteranc是一个基于Github的评论系统，它是一个Github App，它会将评论转为issue记录在仓库中，没有额外配置。首先安装\n然后创建一个文件layouts/partials/comments.html\n{{ if .Site.Params.utteranc.enable }} \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;{{ .Site.Params.utteranc.repo }}\u0026#34; issue-term=\u0026#34;{{ .Site.Params.utteranc.issueTerm }}\u0026#34; theme=\u0026#34;{{ .Site.Params.utteranc.theme }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; {{ end }} 最后修改config.yaml开启comments并且配置utteranc\nparams: comments: true utteranc: enable: true repo: \u0026#34;zhoutao822/zhoutao822.github.io\u0026#34; issueTerm: \u0026#34;title\u0026#34; theme: \u0026#34;github-dark\u0026#34; 可以到仓库的issue中查看到，此条评论被成功记录。\n参考  Hugo: Deploy Static Site using GitHub Actions Host on GitHub Quick Start utteranc hugo-PaperMod 在Hugo中使用MathJax 给hugo博客添加评论功能  ","permalink":"https://zhoutao822.github.io/posts/hugo-on-mac/","summary":"Hugo + Github Pages + Typora搭建Markdown博客","title":"Hugo On Mac"}]